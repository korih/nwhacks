{
    "author": "Jaehwan Seok",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 417,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/417",
    "title": "Ref P2 spinning-bears-starter ERROR",
    "question": "So I have the following code for the problem:\n(require spd/tags)\n(require 2htdp/image)\n(require 2htdp/universe)\n\n(@htdw Bear)\n;; ====================================\n;; Constants:\n\n(define WIDTH 500)\n(define HEIGHT 600)\n\n(define MTS (rectangle WIDTH HEIGHT \"solid\" \"white\"))\n\n(define BEAR-IMAGE\n  (bitmap/url\n   \"https://cs110.students.cs.ubc.ca/bank/bear-img.png\"))\n\n(define ROT-SPEED 5)\n;; ====================================\n;; Data Definitions:\n\n(@htdd Bear)\n(define-struct bear (x y ang))\n;; Bear is (make-bear Number Number Number)\n;; interp. x as x-position\n;;         y as y-position\n;;         angle as angle of rotation\n(define B1 (make-bear 40 40 30))\n(define B2 (make-bear 20 30 361))\n(define B3 (make-bear (/ WIDTH 2) (/ HEIGHT 2) 0))\n\n(@dd-template-rules compound) ; 3 fields\n\n(define (fn-for-bear b)\n  (... (bear-x b)\n       (bear-y b)\n       (bear-ang b)))\n\n\n(@htdd ListOfBear)\n;; ListOfBear is one of:\n;; - empty\n;; - (cons Bear ListOfBear)\n;; interp. as list of Bear\n(define LOB1 empty)\n(define LOB2 (cons B1 empty))\n(define LOB3 (cons B1 (cons B2 empty)))\n(define LOB4 (cons B3 (cons B1 (cons B2 empty))))\n\n(@dd-template-rules one-of           ; 2 cases\n                    atomic-distinct  ;empty\n                    compound         ;(cons Bear ListOfBear)\n                    self-ref         ;(rest lob)\n                    ref)             ;(first lob)\n\n(define (fn-for-lob lob)\n  (cond [(empty? lob) (...)]\n        [else\n         (... (fn-for-bear (first lob))\n              (fn-for-lob (rest lob)))]))\n\n;; ====================================\n;; Functions:\n(@htdf main)\n(@signature ListOfBear -> ListOfBear)\n;; start the world with (main LOB1)\n\n(@template htdw-main)\n\n(define (main lob)\n  (big-bang lob           ;ListOfBear\n    (on-tick spin-bear)   ;ListOfBear -> ListOfBear\n    (to-draw render-lob)  ;ListOfBear -> Image\n    (on-mouse add-bear))) ;ListOfBear Integer Integer MouseEvent -> ListOfBear\n\n\n\n(@htdf spin-bears)\n(@signature ListOfBear -> ListOfBear)\n;; produce next list of bear rotated by ROT-SPEED\n(check-expect (spin-bears empty) empty)\n(check-expect (spin-bears LOB2)\n              (cons (make-bear\n                     (bear-x B1)\n                     (bear-y B1)\n                     (+ (bear-ang B1) ROT-SPEED))\n                    empty))\n(check-expect (spin-bears LOB4)\n              (cons (make-bear\n                     (bear-x B3)\n                     (bear-y B3)\n                     (+ (bear-ang B3) ROT-SPEED))\n                    (cons (make-bear\n                           (bear-x B1)\n                           (bear-y B1)\n                           (+ (bear-ang B1) ROT-SPEED))\n                          (cons (make-bear\n                                 (bear-x B2)\n                                 (bear-y B2)\n                                 (+ (bear-ang B2) ROT-SPEED))  \n                                empty))))\n\n;(define (spin-bears lob) lob) ;stub\n\n(@template ListOfBear)\n\n(define (spin-bears lob)\n  (cond [(empty? lob) empty]\n        [else\n         (cons (spin-bear (first lob))\n               (spin-bears (rest lob)))]))\n\n\n\n(@htdf spin-bear)\n(@signature Bear -> Bear)\n;; given a Bear, produce Bear rotated by ROT-SPEED\n(check-expect (spin-bear B1)\n              (make-bear (bear-x B1) (bear-y B1) (+ (bear-ang B1) ROT-SPEED)))\n(check-expect (spin-bear B2)\n              (make-bear (bear-x B2) (bear-y B2) (+ (bear-ang B2) ROT-SPEED))) \n(check-expect (spin-bear B3)\n              (make-bear (bear-x B3) (bear-y B3) (+ (bear-ang B3) ROT-SPEED)))\n\n;(define (spin-bear b) b);stub\n\n(@template Bear)\n\n(define (spin-bear b)\n  (make-bear (bear-x b)\n             (bear-y b)\n             (+ (bear-ang b) ROT-SPEED)))\n\n\n(@htdf render-lob)\n(@signature ListOfBear -> Image)\n;; render List of Bear into MTS\n(check-expect (render-lob empty) MTS)\n(check-expect (render-lob LOB2)\n              (place-image\n               (rotate (bear-ang B1) BEAR-IMAGE)\n               (bear-x B1)\n               (bear-y B1)\n               MTS))\n(check-expect (render-lob LOB4)\n              (place-image\n               (rotate (bear-ang B3) BEAR-IMAGE)\n               (bear-x B3)\n               (bear-y B3)\n               (place-image\n                (rotate (bear-ang B1) BEAR-IMAGE)\n                (bear-x B1)\n                (bear-y B1)\n                (place-image\n                 (rotate (bear-ang B2) BEAR-IMAGE)\n                 (bear-x B2)\n                 (bear-y B2)\n                 MTS))))\n\n;(define (render-lob lob) MTS) ;stub\n\n(@template ListOfBear)\n\n(define (render-lob lob)\n  (cond [(empty? lob) MTS]\n        [else\n        (render-bear (first lob) (render-lob (rest lob)))]))\n\n(@htdf render-bear)\n(@signature Bear Image -> Image)\n;; render an image of the bear on the given image\n(check-expect (render-bear B1 MTS)\n              (place-image (rotate (bear-ang B1) BEAR-IMAGE)\n                           (bear-x B1)\n                           (bear-y B1)\n                           MTS))\n(check-expect (render-bear B2 MTS)\n              (place-image (rotate (bear-ang B2) BEAR-IMAGE)\n                           (bear-x B2)\n                           (bear-y B2)\n                           MTS))\n(check-expect (render-bear B3 MTS)\n              (place-image (rotate (bear-ang B3) BEAR-IMAGE)\n                           (bear-x B3)\n                           (bear-y B3)\n                           MTS))\n\n;(define (render-bear b) MTS) ;stub\n\n(@template Bear)\n\n(define (render-bear b img)\n  (place-image (rotate (bear-ang b) BEAR-IMAGE)\n               (bear-x b)\n               (bear-y b)\n               img))\n\n\n(@htdf add-bear)\n(@signature ListOfBear Integer Integer MouseEvent -> ListOfBear)\n;; On mouse-click, adds a bear with 0 rotation to the list at the x, y location\n(check-expect (add-bear empty 5 4 \"button-down\")\n              (cons (make-bear 5 4 0) empty))\n(check-expect (add-bear empty 5 4 \"move\") empty)\n\n;(define (add-bear lob n1 n2 mev) lob) ;stub\n\n(@template MouseEvent)\n\n(define (add-bear lob x y mev)\n  (cond [(mouse=? mev \"button-down\") (cons (make-bear x y 0) lob)]\n        [else lob]))            \nAnd I am getting the following error when I try running the problem and clicking on the screen:\nbear-x: expects a bear, given '()\nPlease help, I am stuck on this for 2h now!",
    "student_answer": "I found it:\nyour main function should call spin-bears (plural) and not spin-bear (singular).\n(define (main lob)\n  (big-bang lob           ;ListOfBear\n    (on-tick spin-bears)  ;ListOfBear -> ListOfBear   ; !!! CHANGED spin-bear TO spin-bears\n    (to-draw render-lob)  ;ListOfBear -> Image\n    (on-mouse add-bear))) ;ListOfBear Integer Integer MouseEvent -> ListOfBear",
    "instructor_answer": "Not Found"
}