{
    "author": "Anonymous Atom",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1050,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1050",
    "title": "using make-list, alternate approach, pset10",
    "question": "please <snip> if not allowed, unsure of the discussion of PSETs.\nOne of my solutions uses make-list, and I am unsure why the other works and this one doesn't. My first time around I used map, which made sense at the time. This time, while I redid it, I thought I could make a list of the cons n-path, n-path times, to p-wl, which would serve the same function as mapping all course dependents using n-path and then appending to p-wl.\nAm I missing something? The tests are not running on the make-list version.\n(define (max-credit-path c0)\n\n  ;; c-wl: (listof Course): course worklist/todo\n  ;; p-wl: (listof (listof Course): \n  ;;       courses on path in the tree to coorespodning element of c-wl\n  ;; INVARIANT: c-wl an p-wl must have same length and cooresponding elements\n  ;; rsf: (listof Course): Max totl credits on path so far\n  ;;\n  (local [(define (fn-for-course c path c-wl p-wl rsf)\n            (local [(define n-path (cons c path))]\n              (if (empty? (course-dependents c))\n                  (fn-for-loc c-wl p-wl (max-path n-path rsf))\n                  (fn-for-loc (append (course-dependents c) c-wl)\n                              (append (make-list (length n-path) n-path) p-wl)     ; <<<< HERE\n                              rsf))))\n\n          (define (fn-for-loc c-wl p-wl rsf)\n            (cond [(empty? p-wl) (reverse (map course-number rsf))] \n                  [else\n                   (fn-for-course (first c-wl) (first p-wl)\n                                  (rest c-wl) (rest p-wl) rsf)]))\n          (define (max-path x y)\n            (if (> (path-credits x)\n                   (path-credits y))\n                x\n                y))\n\n          (define (path-credits x)\n            (foldr + 0 (map course-credits x)))]\n    (fn-for-course c0 empty empty empty empty)))\n  (define (max-credit-path c0)\n  ;; c-wl: (listof Course): course worklist/todo\n  ;; p-wl: (listof (listof Course): \n  ;;       courses on path in the tree to coorespodning element of c-wl\n  ;; INVARIANT: c-wl an p-wl must have same length and cooresponding elements\n  ;; rsf: (listof Course): Max totl credits on path so far\n  (local [(define (fn-for-course c path c-wl p-wl rsf)\n            (local [(define n-path (cons c path))]\n              (if (empty? (course-dependents c))\n                  (fn-for-loc c-wl p-wl (max-path n-path rsf))\n                  (fn-for-loc (append (course-dependents c) c-wl)\n                              (append (map (lambda (x) n-path)                      ; <<<< HERE\n                                           (course-dependents c)) p-wl) rsf))))\n\n          (define (fn-for-loc c-wl p-wl rsf)\n            (cond [(empty? p-wl) (reverse (map course-number rsf))] \n                  [else\n                   (fn-for-course (first c-wl) (first p-wl)\n                                  (rest c-wl) (rest p-wl) rsf)]))\n\n          (define (max-path x y)\n            (if (> (path-credits x)\n                   (path-credits y))\n                x\n                y))\n\n          (define (path-credits x)\n            (foldr + 0 (map course-credits x)))]\n    (fn-for-course c0 empty empty empty empty)))",
    "student_answer": "Your invariant states: c-wl and p-wl have the same length. When you add n-path to the path worklist (length n-path) times, are you keeping this invariant? Will (course-dependents c) have the same length as n-path always?",
    "instructor_answer": "Not Found"
}