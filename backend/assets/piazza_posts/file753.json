{
    "author": "Anonymous Mouse",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 753,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/753",
    "title": "2021 mt 2- pt2. (employees-requiring-material)",
    "question": "Hi, i am trying to solve pt 2 and these mutural references are really confusing\n\n I did my own answer but it doesn't seem to be working properly\n\nCould anyone give me some advice how to improve it?\n\n\n(@htdf employees-requiring-material) ;uncomment when you start\n(@signature String Employee -> ListOfEmployee)\n;; produces every employee in tree working on a project requires given material.\n\n(check-expect (employees-requiring-material \"\" E7)\n              empty)\n\n(check-expect (employees-requiring-material \"water\" E1)\n              empty)\n\n(check-expect (employees-requiring-material \"water\" E7)\n              (list E5 E6 E3 E4))\n\n\n\n;(define (employees-requiring-material s e) empty) ;stub\n\n\n(@template encapsulated\n           Employee ListOfEmployee Project ListOfProject ListOfString)\n\n(define (employees-requiring-material s e)\n  (local [(define (fn-for-employee e)\n            (if (not (false? (fn-for-lop (emp-lop e))))\n                (append (fn-for-lop (emp-lop e)) (fn-for-loe (emp-subs e)))\n                 (fn-for-loe (emp-subs e))))\n\n          (define (fn-for-loe loe)\n            (cond [(empty? loe) empty]\n                  [else\n                   (if (not (false? (fn-for-employee (first loe))))\n                       (fn-for-employee (first loe))\n                        (fn-for-loe (rest loe)))]))\n\n          (define (fn-for-project p)\n                 (fn-for-los (pro-lom p)))\n\n          (define (fn-for-lop lop)\n            (cond [(empty? lop) false]\n                  [else\n                   (if (not (false? (fn-for-project (first lop))))\n                       (fn-for-project (first lop))\n                       (fn-for-lop (rest lop)))]))\n\n          (define (fn-for-los los)\n            (cond [(empty? los) false]\n                  [else\n                   (if (string=? s (first los))\n                       (list e)                      \n                        (fn-for-los (rest los)))]))]\n\n    (fn-for-employee e)))",
    "student_answer": "I can see a few issues.\nThe first issue:\n(define (fn-for-loe loe)\n            (cond [(empty? loe) empty]\n                  [else\n                   (if (not (false? (fn-for-employee (first loe))))\n                       (fn-for-employee (first loe))\n                        (fn-for-loe (rest loe)))]))\nfn-for-employee can't produce false, so it always calls (fn-for-employee (first loe)). As a result, this function fails at its recursion and will only ever scan the first element of a ListOfEmployee.\n\n\nYour second issue is here:\n          (define (fn-for-los los)\n            (cond [(empty? los) false]\n                  [else\n                   (if (string=? s (first los))\n                       (list e)                      \n                        (fn-for-los (rest los)))]))]\ne is not a parameter of fn-for-los, so it's not taking the employee that you want to.\nFixing your function will require a bit of reorganization, but I hope this helped!",
    "instructor_answer": "Not Found"
}