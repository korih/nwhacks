{
    "author": "Anonymous Calc",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 633,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/633",
    "title": "Question from mutual recursion videos",
    "question": "Hello, \nFor the following question, I have my functions the same way as they are in the video, however I get the following error for my last two check-expects:\nCode:\n(require spd/tags)\n(require 2htdp/image)\n\n;; fs-starter.rkt (type comments and examples)\n;; fs-v1.rkt (complete data-definition plus function problems)\n\n;; Data definitions:\n\n(@htdd Element)\n\n(define-struct elt (name data subs))\n;; Element is (make-elt String Integer ListOfElement)\n;; interp. An element in the file system, with name, and EITHER data or subs.\n;;         If data is 0, then subs is considered to be list of sub elements.\n;;         If data is not 0, then subs is ignored.\n\n(@htdd ListOfElement)\n\n;; ListOfElement is one of:\n;;  - empty\n;;  - (cons Element ListOfElement)\n;; interp. A list of file system Elements\n; .\n\n(define F1 (make-elt \"F1\" 1 empty))\n(define F2 (make-elt \"F2\" 2 empty))\n(define F3 (make-elt \"F3\" 3 empty))\n(define D4 (make-elt \"D4\" 0 (list F1 F2)))\n(define D5 (make-elt \"D5\" 0 (list F3)))\n(define D6 (make-elt \"D6\" 0 (list D4 D5)))\n#;\n(define (fn-for-element e)\n  (... (elt-name e)    ;String\n       (elt-data e)    ;Integer\n       (fn-for-loe (elt-subs e))))\n#;\n(define (fn-for-loe loe)\n  (cond [(empty? loe) (...)]\n        [else\n         (... (fn-for-element (first loe))\n              (fn-for-loe (rest loe)))])) \n\n\n;; Functions:\n\n; \n; PROBLEM\n; \n; Design a function that consumes Element and produces the sum of all the file data in \n; the tree.\n; \n\n(@htdf sum-all--elt)\n(@htdf sum-all--loe)\n(@signature Element -> Natural)\n(@signature ListOfElement -> Natural)\n(check-expect (sum-all--elt F1) 1)\n(check-expect (sum-all--elt F3) 3)\n(check-expect (sum-all--loe empty) 0)\n(check-expect (sum-all--loe D5) 3)\n(check-expect (sum-all--loe D6) 6)\n\n;(define (sum-all--elt e) 0)\n;(define (sum-all--loe loe) 0)\n\n(define (sum-all--elt e)\n  (if (zero? (elt-data e))    \n      (sum-all--loe (elt-subs e))\n      (elt-data e)))\n\n(define (sum-all--loe loe)\n  (cond [(empty? loe) 0]\n        [else\n         (+ (sum-all--elt (first loe))\n            (sum-all--loe (rest loe)))])) \n\nERRORS:\n\ncheck-expect encountered the following error instead of the expected value, 3. \n   :: first: expects a non-empty list; given: (make-elt \"D5\" 0 (list (make-elt \"F3\" 3 '())))\n\ncheck-expect encountered the following error instead of the expected value, 6. \n   :: first: expects a non-empty list; given: (make-elt \"D6\" 0 (list (make-elt \"D4\" 0 (list (make-elt \"F1\" 1 '()) (make-elt \"F2\" 2 '()))) (make-elt \"D5\" 0 (list (make-elt \"F3\" 3 '())))))\nI am not sure what is going wrong, because it looks like first is being provided with a list? ",
    "student_answer": "D5 and D6 are Elements, not ListOfElement. You can't run the sum-all--loe test on D5 and D6.",
    "instructor_answer": "Not Found"
}