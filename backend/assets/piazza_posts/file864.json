{
    "author": "Anonymous Mouse",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 864,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/864",
    "title": "Is this function tail-recursive?",
    "question": "(@problem 1)\n;; Consider the following function that consumes a list of numbers and produces\n;; the sum of all the odd numbers in the list.\n;;\n;; Use an accumulator to design a tail-recursive version of sum-odds.\n\n\n(@htdf sum-odds)\n(@signature (listof Number) -> Number)\n;; produce sum of all odd numbers of lon\n(check-expect (sum-odds empty) 0) \n(check-expect (sum-odds (list 1 2 5 6 11)) 17) \n(check-expect (sum-odds (list 1 3 5 7 8 9)) 25)\n\n(@template (listof Number) accumulator)\n\n(define (sum-odds lon0)\n  ;; acc: Natural; sum of odd naturals seen so far\n  ;; (sum-odds (list 1 2 5 6 11) 1)  \n  ;; (sum-odds (list   2 5 6 11) 1)\n  ;; (sum-odds (list     5 6 11) 6)\n  ;; (sum-odds (list       6 11) 6)\n  ;; (sum-odds (list         11) 17)\n  ;; (sum-odds (list           ) 17)\n  (local [(define (sum-odds lon acc)\n            (cond [(empty? lon) acc]\n                  [else\n                   (sum-odds (rest lon) (if (odd? (first lon))\n                                            (+ (first lon) acc)\n                                            (+ 0 acc)))]))]\n\n    (sum-odds lon0 0)))\nMy answer does not seem to look anything like the solution lol\nIf this is not tail-recursive, could anyone give me a hint as to what I might be doing wrong?\nGreatly appreciate any help!",
    "student_answer": "Not Found",
    "instructor_answer": "Yes that is tail recursive.\nBecause we have if EXPRESSIONS rather than if statements, there are lots of choices for where to put the if.  All the following are equivalent:\n      (local [(define (sum-odds lon acc)\n                (cond [(empty? lon) acc]\n                      [else\n                       (if (odd? (first lon))\n                           (sum-odds (rest lon) (+ (first lon) acc))\n                           (sum-odds (rest lon) acc))]))]\n  \n        (sum-odds lon0 0))\n      \n      (local [(define (sum-odds lon acc)\n                (cond [(empty? lon) acc]\n                      [else\n                       (sum-odds (rest lon) (if (odd? (first lon))\n                                                (+ (first lon) acc)\n                                                (+ 0 acc)))]))]\n\n        (sum-odds lon0 0))\n\n      (local [(define (sum-odds lon acc)\n                (cond [(empty? lon) acc]\n                      [else\n                       (sum-odds (rest lon)\n                                 (+ (if (odd? (first lon)) (first lon) 0)\n                                    acc))]))]\n\n        (sum-odds lon0 0)))"
}