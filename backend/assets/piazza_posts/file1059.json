{
    "author": "Anonymous Poet",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1059,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1059",
    "title": "2019 W2 P1",
    "question": "Hello, for the following function, I was wondering why my solution was not passing one of the check expects. I understand how the posted solution works, but why couldn't backtracking search be used in this case?\n(require spd/tags)\n\n(@assignment exams/2019w2-f/f-p1)\n\n(@cwl ???)\n\n\n(@problem 1)\n\n;; Consider the following data definition:\n\n(@htdd Hobbit)\n(define-struct hob (name age sons))\n;; Hobbit is (make-hob String Natural (listof Hobbit))\n;; interp. a hobbit in a patriarchal family tree\n;;         name is the first name\n;;         age at time of death\n;;         sons is list of their male children\n\n(define H1 (make-hob \"Bungo\" 54 (list (make-hob \"Bilbo\" 146 empty))))\n(define H2 (make-hob \"Longo\" 123\n                     (list (make-hob \"Otho\" 98\n                                     (list (make-hob \"Lotho\" 136 empty))))))\n\n(define H3 (make-hob \"Bingo\" 56 (list (make-hob \"Falco\" 98 empty))))\n\n(define H4 (make-hob \"Polo\" 80\n                     (list (make-hob \"Posco\" 98\n                                     (list (make-hob \"Ponto\" 108 empty)\n                                           (make-hob \"Porto\" 74 empty))))))\n\n(define H5 (make-hob \"Fosco\" 117\n                     (list (make-hob \"Drogo\" 76\n                                     (list (make-hob \"Frodo\" 98 empty)))\n                           (make-hob \"Dudo\" 113 empty))))\n\n(define H6 (make-hob \"Mungo\" 97 (list H1 H2 H3)))\n(define H7 (make-hob \"Ponto\" 94 (list H4)))\n(define H8 (make-hob \"Largo\" 100 (list H5)))\n(define H9 (make-hob \"Balbo\" 110 (list H6 H7 H8)))\n\n\n(define (fn-for-hobbit h)\n  (local [(define (fn-for-hobbit h)\n            (... (hob-name h)\n                 (hob-age h)\n                 (fn-for-loh (hob-sons h))))\n          \n          (define (fn-for-loh loh)\n            (cond [(empty? loh) (...)]\n                  [else\n                   (... (fn-for-hobbit (first loh))\n                        (fn-for-loh (rest loh)))]))]\n\n    (fn-for-hobbit h)))\n\n\n;;\n;; PROBLEM 1:\n;;\n;; Design a function that consumes a hobbit and a natural number and produces\n;; a list of all the hobbits in the tree older than the given age.  Your\n;; function MUST be called older-than, and it must consume a hobbit and a\n;; natural number in that order\n;;\n\n(@htdf older-than)\n(@signature Hobbit Natural -> (listof Hobbit))\n;; Produce list of hobbits older than given natural\n(check-expect (older-than (make-hob \"Bilbo\" 146 empty) 130)\n              (list (make-hob \"Bilbo\" 146 empty)))\n(check-expect (older-than H2 120) (list H2 (make-hob \"Lotho\" 136 empty)))\n(check-expect (older-than H4 80)\n              (list (make-hob \"Posco\" 98\n                              (list (make-hob \"Ponto\" 108 empty)\n                                    (make-hob \"Porto\" 74 empty)))\n                    (make-hob \"Ponto\" 108 empty)))\n\n(check-expect (older-than H9 100)\n              (list H9\n                    (make-hob \"Bilbo\" 146 empty)\n                    H2\n                    (make-hob \"Lotho\" 136 empty)\n                    (make-hob \"Ponto\" 108 empty)\n                    H5                                       \n                    (make-hob \"Dudo\" 113 empty)))\n\n(define (older-than h n)\n  (local [(define (fn-for-hobbit h)\n            (if (> (hob-age h) n)\n                (cons h (fn-for-loh (hob-sons h)))\n                (fn-for-loh (hob-sons h))))\n          \n          (define (fn-for-loh loh)\n            (cond [(empty? loh) empty]\n                  [else\n                   (local [(define try (fn-for-hobbit (first loh)))]\n                     (if (not (false? try))\n                         try\n                         (fn-for-loh (rest loh))))]))]\n\n    (fn-for-hobbit h)))",
    "student_answer": "Correct me if I am wrong, but how I understand it is that when you're doing a backtracking search/try-catch, you are trying to search through the whole tree to find something, if you can't find it in the tree then you produce false. It wouldn't exactly make sense in this case to do a backtracking search/try-catch because you're not trying to search for something specific in the tree. You're trying to find all Hobbits in the tree that are older than a given age. \nAlso, don't forget to include a template tag in your solution!",
    "instructor_answer": "Not Found"
}