{
    "author": "Anonymous Beaker",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 636,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/636",
    "title": "Backtrack search question from mutual recursion",
    "question": "Hello, for the following code, I'm confused about the definition of find--loe. A part of this function says (false? (find--element n (first loe))). However, the find--element does not produce a boolean (false) by it's definition, so how can it provide the list function with a false? For reference, this is what the problem is asking:\nPROBLEM:\n\nDesign a function that consumes String and Element and looks for a data element with the given \nname. If it finds that element it produces the data, otherwise it produces false.\nCode:\n(require spd/tags)\n(require 2htdp/image)\n\n;; fs-starter.rkt (type comments and examples)\n;; fs-v1.rkt (complete data-definition plus function problems)\n;; fs-v2.rkt (complete data-definition and sum-data function)\n;; fs-v3.rkt (complete data-definition, sum-data function and all-names function)\n\n;; Data definitions:\n(@htdd Element)\n(define-struct elt (name data subs))\n;; Element is (make-elt String Integer ListOfElement)\n;; interp. An element in the file system, with name, and EITHER data or subs.\n;;         If data is 0, then subs is considered to be list of sub elements.\n;;         If data is not 0, then subs is ignored.\n(@htdd ListOfElement)\n;; ListOfElement is one of:\n;;  - empty\n;;  - (cons Element ListOfElement)\n;; interp. A list of file system Elements\n\n; .\n\n(define F1 (make-elt \"F1\" 1 empty))\n(define F2 (make-elt \"F2\" 2 empty))\n(define F3 (make-elt \"F3\" 3 empty))\n(define D4 (make-elt \"D4\" 0 (list F1 F2)))\n(define D5 (make-elt \"D5\" 0 (list F3)))\n(define D6 (make-elt \"D6\" 0 (list D4 D5)))\n#;\n(define (fn-for-element e)\n  (... (elt-name e)    ;String\n       (elt-data e)    ;Integer\n       (fn-for-loe (elt-subs e))))\n#;\n(define (fn-for-loe loe)\n  (cond [(empty? loe) (...)]\n        [else\n         (... (fn-for-element (first loe))\n              (fn-for-loe (rest loe)))])) \n\n\n;; Functions:\n\n\n(@htdf find--element)\n(@htdf find--loe)\n(@signature String Element -> Integer or false)\n(@signature String ListOfElement -> Integer or false)\n;; search the given tree for an element with the given name\n(check-expect (find--loe \"F3\" empty) false)\n(check-expect (find--element \"F3\" F1) false)\n(check-expect (find--element \"F3\" F3) 3)\n(check-expect (find--element \"F3\" D4) false)\n(check-expect (find--element \"F1\" D4) 1)\n(check-expect (find--element \"F2\" D4) 2)\n(check-expect (find--loe \"F2\" (cons F1 (cons F2 empty))) 2)\n(check-expect (find--loe \"F3\" (cons F1 (cons F2 empty))) false)\n(check-expect (find--element \"D4\" D4) 0)\n(check-expect (find--element \"F3\" D6) 3)\n\n;(define (find--element n e) false)  ; stub\n;(define (find--loe n loe) false)    ; stub\n\n\n(define (find--element n e)\n  (if (string=? n (elt-name e))\n       (elt-data e)    \n       (find--loe n (elt-subs e))))\n\n(define (find--loe n loe)\n  (cond [(empty? loe) false]\n        [else\n         (if (not (false? (find--element n (first loe))))\n             (find--element n (first loe))\n              (find--loe n (rest loe)))])) ",
    "student_answer": "The find--element function calls the mutual recursion (find--loe n (elt-subs e)) as the false answer for (string=? n (elt-name e)). The result for when all searches fail for find--loe is false - this is the false result that (find--element n (first loe)) provides.",
    "instructor_answer": "Not Found"
}