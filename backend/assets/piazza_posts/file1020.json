{
    "author": "Mina Chong",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1020,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1020",
    "title": "making decode function tail recursive",
    "question": "Hello, for extra practice I was trying to make the solution for 2020w2 tail recursive.\nHere's the original solution:\n(@htdf decode)\n(@signature (listof Natural) -> Natural)\n;; decode message consisting of skip instructions and numbers to sum\n(check-expect (decode (list)) 0)\n(check-expect (decode (list 3)) 0)\n(check-expect (decode (list 2)) 2)\n(check-expect (decode (list 2 4)) 6)\n(check-expect (decode (list 1 2 4)) 4)\n(check-expect (decode (list 1 3 4 6 8 2 4)) 4)\n(check-expect (decode (list 1 2 4 3 2 4 6 8 4)) (+ 4 8 4))\n\n(@template (listof X) accumulator)\n\n(define (decode loi0)\n  ;; skipn is Natural; number of even numbers remaining to skip\n  ;; rsf is Natural; sum of unskipped even numbers so far\n  (local [(define (scan lst skipn rsf)\n            (cond [(empty? lst) rsf]\n                  [else\n                   (cond [(odd? (first lst))\n                          (scan (rest lst)\n                                (+ skipn (first lst))\n                                rsf)]\n                         [(> skipn 0)\n                          (scan (rest lst)\n                                (sub1 skipn)\n                                rsf)]\n                         [else\n                          (scan (rest lst)\n                                0\n                                (+ rsf (first lst)))])]))]\n    (scan loi0 0 0)))\nAnd here's what I did to try and make it tail-recursive, would this work?\n(define (decode lon0)\n  ;; skip is Natural\n  ;; number of even numbers remaining to be skipped\n  ;;\n  ;; sum is Natural\n  ;; sum of all non-skipped even numbers seen so far\n  \n  (local [(define (fn-for-lon lon skip sum)\n            (cond [(empty? lon) sum]\n                  [else\n                   (fn-for-lon (rest lon)\n                               (cond [(odd? (first lon)) (+ skip (first lon))]\n                                     [(> skip 0) (sub1 skip)]\n                                     [else 0])\n                               (cond [(odd? (first lon)) sum]\n                                     [(> skip 0) sum]\n                                     [else (+ (first lon) sum)]))]))]\n\n    (fn-for-lon lon0 0 0)))\nThanks!",
    "student_answer": "#;\n(define (decode lon0)\n  ;; skip is Natural\n  ;; number of even numbers remaining to be skipped\n  ;;\n  ;; sum is Natural\n  ;; sum of all non-skipped even numbers seen so far\n  \n  (local [(define (fn-for-lon lon skip sum)\n            (cond [(empty? lon) sum]\n                  [else\n                   (if (zero? skip)\n                       (if (odd? (first lon))\n                           (fn-for-lon (rest lon) (+ (first lon) skip) sum)\n                           (fn-for-lon (rest lon) skip (+ (first lon) sum)))\n                       (if (odd? (first lon))\n                           (fn-for-lon (rest lon) (+ (first lon) skip) sum)\n                           (fn-for-lon (rest lon) (sub1 skip) sum)))]))]\n\n    (fn-for-lon lon0 0 0)))",
    "instructor_answer": "Not Found"
}