{
    "author": "Anonymous Helix",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 525,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/525",
    "title": "Will I lose marks if my pset5 solution looks a bit different?",
    "question": "I scored 99 according to the autograder for pset5, but there were a few parts of my file that looked a bit\ndifferent than what the solution shows.\nI know it looks like a mess, but would my (game-with-caught-balls) function and the helper function for it lose points?\nI'm afraid I might have broken the Game template for (game-with-caught-balls), and I had a completely different signature for the helper I used for it than the solution file did. I also realize now the name for the\nhelper wasn't exactly appropriate\n(define (game-with-caught-balls g)\n  (cond [(empty? (game-balls g)) (make-game empty (game-paddle g))]\n        [else\n         (insert (first (game-balls g))\n                 (game-with-caught-balls\n                  (make-game (rest (game-balls g)) (game-paddle g))))]))\nHelper function (insert)\n...\n(@signature Ball Game -> Game)\n...\n(@template Game)\n(define (insert b g)\n  (cond [(empty? (game-balls g)) (if (touch-paddle? b (game-paddle g))\n                                     g\n                                     (make-game (cons b (game-balls g))\n                                                (game-paddle g)))]\n        [else\n         (if (touch-paddle? b (game-paddle g))\n             g\n             (make-game (cons b (game-balls g)) (game-paddle g)))]))\nGreatly appreciate any help/feedback.",
    "student_answer": "Not Found",
    "instructor_answer": "I'm really glad you asked this question.\nProgramming is hard, and writing \"good\" code is much harder.  It has taken the field years to understand what good means, and even longer to come up with design methods that reliably produce good code.  The goal of this course is for you to learn to use a simple set of such methods.\nI say all that by way of introduction, because I do have to make some critical comments of the code.  Part of why I am so glad you posted this is because we see lots of code with similar problems so we can all learn from this.  \nThe code above has a number of problems that could have been avoided by sticking more closely to the design methods.\nNeither function follows 1 task per function, partly because neither function follows the reference rule, partly because neither function is based on a clear template. The two templates are:\n(define (fn-for-ball b)\n  (... (ball-x b)\n       (ball-y b)\n       (ball-dx b)\n       (ball-dy b)))\n\n(define (fn-for-lob lob)\n  (cond [(empty? lob) (...)]\n        [else\n         (... (fn-for-ball (first lob))\n              (fn-for-lob (rest lob)))]))\nThe two functions above both use both templates.  I imagine they were quite difficult to write and debug because of that.  Compare to the solution in which each function does much less work and is only based on one template:\n(@template fn-composition)\n\n(define (next-game g)\n  (game-with-caught-balls (game-with-next-balls g)))\n\n(@template Game)\n\n(define (game-with-next-balls g)\n  (make-game (next-balls (game-balls g))\n             (game-paddle g)))\n\n(@template Game)\n\n(define (game-with-caught-balls g)\n  (make-game (catch-balls (game-balls g)\n                          (game-paddle g))\n             (game-paddle g)))\n\n(@template ListOfBall)\n\n(define (catch-balls lob p)\n  (cond [(empty? lob) empty]\n        [else\n         (if (touch-paddle? (first lob) p)\n             (catch-balls (rest lob) p)\n             (cons (first lob)\n                   (catch-balls (rest lob) p)))]))\n\n(@template Ball)\n\n(define (touch-paddle? b p)\n  (and (<= (- p (/ PADDLE-WIDTH 2))\n           (ball-x b)\n           (+ p (/ PADDLE-WIDTH 2)))\n       (<= (- PADDLE-CTR-Y (/ PADDLE-THICKNESS 2))\n           (ball-y b)\n           (+ PADDLE-CTR-Y (/ PADDLE-THICKNESS 2)))))"
}