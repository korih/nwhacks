{
    "author": "Anonymous Helix",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 623,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/623",
    "title": "Result of the Natural Recursion",
    "question": "Hello, \nI was wondering how I would know what the result of the natural recursion is? I often find it difficult to know what operation to place in the combination position of functions because I am not sure if the recursion is giving me, for example, a number, or a listofnumber, etc.\nA specific example of this is in the arrange-images starter we did during the lecture a few weeks back. How were we certain that the sort images natural recursion was going to give us an already sorted list?\nPerhaps the root of the problem is that I am unsure of how the natural recursion works/operates. \nThank you so much for the help, I really appreciate it!",
    "student_answer": "First, the type of what the NR is producing can also be found in the base case: empty for list, number, image, etc. \nThe result of the NR is what you expect it to produce: if you try to produce a sorted list, the result of the NR is a sorted list. That is what the trust means: On the ListOfSomthing template when you iterate each item of the list, you assume that the rest of the list is already ready (or sorted in the example that you gave). So when you cons the \"first item\" to the result of the NR, you should trust that the rest of the items in the list are also fit to what you are trying to produce.\nfor example, the image sorting, you should assume that the result of the natural recursion is already a sorted list of images. It might help to think about the smaller cases first. If you add an img to an empty list, you get only the new image. if you have a list of one image, and you add another - the helper in that case (larger?) will help to sort the list - each time the fn compares the img to the first img \"next to\" it. so you can tell that the rest of the list is already sorted. \nI think that the Blob lab can also help if it is still not clear.  \n(define (insert img loi)\n  (cond [(empty? loi) (cons img empty)]\n        [else\n         (if (larger? img (first loi))\n             (cons (first loi)\n                   (insert img\n                           (rest loi)))\n             (cons img loi))]))\nIn other cases, when you are comparing each item to something, adding or producing an image, the NR will help to iterate over each item in the list and detect the relevant (positive, true, etc.), so you can assume that those items are already in what you are looking for. ",
    "instructor_answer": "Not Found"
}