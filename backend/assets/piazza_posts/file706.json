{
    "author": "Anonymous Scale",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 706,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/706",
    "title": "try-catch",
    "question": "Would someone be able to explain why we use try-catch in the function body? I'm struggling to understand the purpose of it, and why we use (not (false?)) if someone could explain using an example it'd be super appreciated!",
    "student_answer": "The base case (empty? false) is part of the try-catch template, which produces X or false, so if the function doesn't produce false (not (false?) - it means that we found what we are looking at on the specific first element. The if condition is true, there is no need to keep searching and iterate the rest of the list, you only need to find it once. \nFor example, we can use this code from the sample solution to PSET\n6\n(@problem 5)\n\n(@htdf find-course--course find-course--loc)\n(@signature Course Natural -> Course or false)\n(@signature ListOfCourse Natural -> Course or false)\n;; produce course in tree with given course number, fail otherwise\n(check-expect (find-course--loc empty 110) false)\n(check-expect (find-course--course C189 189) C189)\n(check-expect (find-course--course C189 210) false)\n(check-expect (find-course--loc LOC3 317) C317)\n(check-expect (find-course--loc LOC5 313) C313)\n(check-expect (find-course--course C110 310) C310)\n(check-expect (find-course--course C110 349) false)\n\n(@template Course)\n\n(define (find-course--course c course-num)\n  (if (= (course-number c) course-num)\n      c\n      (find-course--loc (course-dependents c) course-num)))\n\n(@template ListOfCourse try-catch)\n\n(define (find-course--loc loc course-num)\n  (cond [(empty? loc) false]\n        [else\n         (if (not (false? (find-course--course (first loc) course-num)))\n             (find-course--course (first loc) course-num)\n             (find-course--loc (rest loc) course-num))]))\nAs you can see, we have\n3\nsteps during the search:\n1\n. empty list - produce false, no need to keep looking. \n2\n. the first element - if it's there - great. Produce course num in this case, and that's it. \n3\n. the rest of the list - keep iterating until the end of the list or until you find whatever comes first. \nyou can also see the explanation here Backtracking Search",
    "instructor_answer": "Not Found"
}