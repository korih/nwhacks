{
    "author": "Anonymous Comp",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 881,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/881",
    "title": "Need help on the find-path starter",
    "question": "For the find-path problem where we only need the context preserving accumulator, I'm a bit stuck on how to reach the correct solution. Could anyone give me a nudge or hint to get me in the right direction? I have a feeling I'm way off the solution, and my understanding of what the accumulator should exactly be or how it should interact with the code is not very clear\n;; Complete the design of the find-path function below.\n;;\n;; Your function definition should use a context preserving accumulator to\n;; represent the path to the current tree.\n;;\n\n(@htdf find-path)\n\n(@signature Tree String -> (listof String) or false)\n;; produce path to node w/ given name (or fail)\n(check-expect (find-path L1 \"L1\") (list \"L1\"))\n(check-expect (find-path L1 \"L2\") false)\n(check-expect (find-path L2 \"L2\") (list \"L2\"))\n(check-expect (find-path M1 \"L1\") (list \"M1\" \"L1\"))\n(check-expect (find-path TOP \"L3\") (list  \"TOP\" \"M2\" \"L3\"))\n\n(@template encapsulated Tree (listof Tree) try-catch accumulator)\n\n\n(define (find-path t n)\n  ;; path is (listof String); path of nodes travelled so far\n  ;; (find-path M1 \"L1\")\n  ;; (fn-for-t M1 empty)\n  ;; (fn-for-lot (subs M1) (list M1))\n  ;; (fn-for-t L1 (list M1))\n  ;;              (list M1 L1)\n  \n  (local [(define (fn-for-t t path)\n            (local [(define name (node-name t))\n                    (define subs (node-subs t))]\n              (if (string=? n name)\n                  (list name)\n                  (fn-for-lot subs (append path (list name))))))\n          \n          (define (fn-for-lot lot path)\n            (cond [(empty? lot) false]\n                  [else\n                   (if (not (false? (fn-for-t (first lot) path)))\n                       (fn-for-t (first lot) path)\n                       (fn-for-lot (rest lot) path))]))]                       \n    \n    (fn-for-t t empty)))\nThank you very much for any help!",
    "student_answer": "Think about what the problem wants you to produce, it wants the path taken to get to the given node.\nWhat do you currently produce? (rhetorical)",
    "instructor_answer": "Not Found"
}