{
    "author": "Anonymous Gear",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1031,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1031",
    "title": "2019 W2 P1",
    "question": "I was wondering if this would also be an appropriate way to solve the first problem of the 2019 term 2 final. I definitely overcomplicated it and understand why we don't need an accumulator, but if I were to do a problem in a completely different way than intended (but still have it work on all tests) on the final, would I lose marks? (it passes all the tests I have so far).\n\n(define (fn-for-hobbit h)\n(local [(define (fn-for-hobbit h)\n(... (hob-name h)\n(hob-age h)\n(fn-for-loh (hob-sons h))))\n\n(define (fn-for-loh loh)\n(cond [(empty? loh) (...)]\n[else\n(... (fn-for-hobbit (first loh))\n(fn-for-loh (rest loh)))]))]\n\n(fn-for-hobbit h)))\n\n\n;;\n;; PROBLEM 1:\n;;\n;; Design a function that consumes a hobbit and a natural number and produces\n;; a list of all the hobbits in the tree older than the given age. Your\n;; function MUST be called older-than, and it must consume a hobbit and a\n;; natural number in that order\n;;\n\n(@htdf older-than)\n(@signature Hobbit Natural -> (listof Hobbit))\n;; produces a list of all the hobbits in the tree older than the given age\n(check-expect (older-than H1 150) empty)\n(check-expect (older-than H1 146) empty)\n(check-expect (older-than H1 60) (list (make-hob \"Bilbo\" 146 empty)))\n(check-expect (older-than H2 124) (list\n(make-hob\n\"Lotho\" 136 empty)))\n\n(check-expect (older-than H2 140) empty)\n\n;(define (older-than h n) empty) ;stub\n\n(define (older-than h n)\n;; older is (listof Hobbit); list of all hobbits in tree with age > n\n(local [(define (fn-for-hobbit h older)\n(if (> (hob-age h) n)\n(fn-for-loh (hob-sons h) (append older (list h)))\n(fn-for-loh (hob-sons h) older)))\n\n(define (fn-for-loh loh older)\n(cond [(empty? loh) older]\n[else\n(fn-for-hobbit (first loh) older)]))]\n\n(fn-for-hobbit h empty)))",
    "student_answer": "One problem I see here is that you have a tail recursive function. The problem lies in the fact that you really are not traversing the entire tree of the hobbit you gave your function. When I used your function for the case of a very large Hobbit, example I used H6, i did not end up with the desired list of hobbits. I would recommend either trying to add a worklist or do not make this function tail recursive.",
    "instructor_answer": "Not Found"
}