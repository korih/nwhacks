{
    "author": "Anonymous Gear",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 416,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/416",
    "title": "Different function",
    "question": "What if I did not use the \"solution method\" in the midterm? And What if I did not use the \"solution name\" (if the question doesn't define the name to us) for my function in the midterm?\nFor example here, the question didn't mention that the referential function should be named Volume and I use a different method on this function. (My code is at the bottom and above is the solution code)\n(@problem 4) \n;; You are given the following data definitions for Solid and ListOfSolid:\n\n(@htdd Solid)\n(define-struct solid (w h d))\n;; Solid is (make-solid Number Number Number)\n;; interp. the width, height, and depth of a 3 dimensional rectangular solid\n(define SLD1 (make-solid 2 3 4))\n(define SLD2 (make-solid 2.3 6 1.1))\n\n(@dd-template-rules compound)\n\n(define (fn-for-solid s)\n  (... (solid-w s)\n       (solid-h s)\n       (solid-d s)))\n\n(@htdd ListOfSolid)\n;; ListOfSolid is one of:\n;; - empty\n;; - (cons Solid ListOfSolid)\n;; interp. a list of 3 dimensional rectangular solids\n\n(define LOS0 empty)\n(define LOS1 (cons (make-solid 2 3 4) empty))\n(define LOS2 (cons (make-solid 1 1 1)\n                   (cons (make-solid 1.1 1.2 1.3)\n                         (cons (make-solid 10 20 30) empty))))\n\n(@dd-template-rules one-of          ; 2 cases\n                    atomic-distinct ; empty\n                    compound        ; cons\n                    ref             ; Solid\n                    self-ref)       ; ListOfSolid\n\n(define (fn-for-los l)\n  (cond [(empty? l) (...)]\n        [else\n         (... (fn-for-solid (first l))\n              (fn-for-los (rest l)))]))\n\n\n;;\n;; Design a function called count-larger that takes a ListOfSolid and a\n;; number and produces the number of solids in the list whose volume\n;; is >= the given number.\n;; Reminder:  the volume of a rectangular solid is given by:\n;;    volume = width * height * depth\n\n(@htdf count-larger)\n(@signature ListOfSolid Number -> Natural)\n;; produces the amount of solids in the list that volume is >= the given number\n(check-expect (count-larger LOS0 10) 0)\n(check-expect (count-larger LOS1 25) 0)\n(check-expect (count-larger LOS1 24) 1)\n(check-expect (count-larger LOS1 23) 1)\n(check-expect (count-larger LOS2 100) 1)\n(check-expect (count-larger LOS2 1) 3)\n\n(check-expect (count-larger (cons (make-solid 10 10 10)\n                    (cons (make-solid 9 9 9)\n                          (cons (make-solid 100 10 100) empty))) 1000)\n              2)\n              \n\n;(define (count-larger los n) n) ;stub\n\n(@template ListOfSolid) ;template tag\n\n(define (count-larger los n)\n  (cond [(empty? los) 0]\n        [else\n         (+ (if (>= (volume (first los)) n) 1 0)\n            (count-larger (rest los) n))]))\n\n(@htdf volume)\n(@signature Solid -> Natural)\n;; produces 1 if a solid volume is >= the given number, otherwise 0\n(check-expect (volume SLD1) 24)\n(check-expect (volume (make-solid 1 1 1)) 1)\n\n\n;(define (volume s ) s) ;stub\n\n(@template Solid) ;template tag\n\n(define (volume s)\n  (* (solid-w s) (solid-h s) (solid-d s)))\n\n\n\n\n; (define (count-larger los n)\n;   (cond [(empty? los) 0]\n;         [else\n;          (+ ((count-one (first los)) n)\n;             (count-larger (rest los) n))]))\n; \n; (define (count-one s)\n;   (if (>= (* (solid-w s) (solid-h s) (solid-d s)) n)\n;       1\n;       0))",
    "student_answer": "Not Found",
    "instructor_answer": "@402 addresses this in part.\nIn short, if we do not specify names you are free to choose your own names.  But read the entire problem descriptions several times carefully to be sure you follow everything we say.\nWe always expect you to follow the design recipes fully. Take a look at @402 and see if that helps; if not ask a follow up."
}