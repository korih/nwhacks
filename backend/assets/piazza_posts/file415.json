{
    "author": "Anonymous Comp",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 415,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/415",
    "title": "2020 w1 mt1",
    "question": "Hi, I was doing problem 4 of 2020w1 Midterm 1, the autograder didn't accept my program I feel like. It returned me this message. I think the Autograder wanted me to make a volume function. DrRacket told me that all of my tests passed for further note. \nI was wondering whether anybody could comment on this? \n(require spd/tags)\n(require 2htdp/image)\n\n(@assignment exams/2020w1-mt1/mt1-p4)\n\n(@cwl ???)   ;fill in your CWL here (same CWL you put for 110 problem sets)\n\n(@problem 1) ;DO NOT EDIT OR DELETE this line\n(@problem 2) ;DO NOT EDIT OR DELETE this line\n(@problem 3) ;DO NOT EDIT OR DELETE this line\n\n(@problem 4) \n;; You are given the following data definitions for Solid and ListOfSolid:\n\n(@htdd Solid)\n(define-struct solid (w h d))\n;; Solid is (make-solid Number Number Number)\n;; interp. the width, height, and depth of a 3 dimensional rectangular solid\n(define SLD1 (make-solid 2 3 4))\n(define SLD2 (make-solid 2.3 6 1.1))\n\n(@dd-template-rules compound)\n\n(define (fn-for-solid s)\n  (... (solid-w s)\n       (solid-h s)\n       (solid-d s)))\n\n(@htdd ListOfSolid)\n;; ListOfSolid is one of:\n;; - empty\n;; - (cons Solid ListOfSolid)\n;; interp. a list of 3 dimensional rectangular solids\n\n(define LOS0 empty)\n(define LOS1 (cons (make-solid 2 3 4) empty))\n(define LOS2 (cons (make-solid 1 1 1)\n                   (cons (make-solid 1.1 1.2 1.3)\n                         (cons (make-solid 10 20 30) empty))))\n\n(@dd-template-rules one-of          ; 2 cases\n                    atomic-distinct ; empty\n                    compound        ; cons\n                    ref             ; Solid\n                    self-ref)       ; ListOfSolid\n\n(define (fn-for-los l)\n  (cond [(empty? l) (...)]\n        [else\n         (... (fn-for-solid (first l))\n              (fn-for-los (rest l)))]))\n\n\n;;\n;; Design a function called count-larger that takes a ListOfSolid and a\n;; number and produces the number of solids in the list whose volume\n;; is >= the given number.\n;; Reminder:  the volume of a rectangular solid is given by:\n;;    volume = width * height * depth\n;;\n\n(@htdf count-larger)\n(@signature ListOfSolid Number -> Natural)\n;;+1 everytime the fn-for-solid is evaluated true\n(check-expect (count-larger empty 0) 0)\n(check-expect (count-larger (cons SLD1 empty) 0) 1)\n(check-expect (count-larger (cons SLD1 (cons SLD2\n                                             (cons SLD2 empty))) 1) 3)\n(check-expect (count-larger (cons (make-solid 10 10 10)\n                                  (cons (make-solid 20 20 20)\n                                        (cons (make-solid 3 3 3) empty))) 2) 3)\n(check-expect (count-larger (cons (make-solid 3 3 3) empty) 27) 1)\n(check-expect (count-larger (cons (make-solid 3 3 3)\n                                  (cons (make-solid 4 4 4) empty)) 27) 2)\n\n;(define (count-larger l num) 1)\n\n(@template ListOfSolid)\n\n(define (count-larger l n)\n  (cond [(empty? l) 0]\n        [else\n         (+ (compare-solid (first l) n)\n            (count-larger (rest l) n))]))\n\n(@htdf compare-solid)\n(@signature Solid Number -> Natural)\n;Compare if solid v is equal or bigger than number, true 1\n(check-expect (compare-solid (make-solid 10 10 10) 1200) 0)\n(check-expect (compare-solid (make-solid 10 10 10) 1001) 0)\n(check-expect (compare-solid (make-solid 10 10 10) 100) 1)\n(check-expect (compare-solid (make-solid 10 10 10) 1000) 1)\n(check-expect (compare-solid (make-solid 1 1 1) 0) 1)\n(check-expect (compare-solid (make-solid 1 1 1) 1) 1)\n\n;(define (compare-solid s n) 1)\n\n(@template Solid)\n\n(define (compare-solid s n)\n  (cond [(>= (* (solid-w s) (solid-h s) (solid-d s)) n) 1]\n        [else 0]))",
    "student_answer": "Not Found",
    "instructor_answer": "fixed now, thanks for letting us know"
}