{
    "author": "Anonymous Gear",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 991,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/991",
    "title": "2020 practice final Problem 3",
    "question": "I understand the visited values, but I am unsure how to end up with the values for path-wl and tree-wl\u2026 Any explanation for the question below would be really helpful.\nNow consider a function that searches through the tree R.  The function:\n   is based on the Tree and (listof Tree) templates\n   it has fn-for-t and fn-for-lot mutually recursive functions\n   is tail recursive\n   has a visited accumulator\n   and uses tandem worklists to maintain the path at each point\n\nExactly what value the function computes does not matter for this question.\n\nIn this question you have to use your understanding of how such functions work\nto determine the value of certain accumulators at different points in the\nfunction's traversal of the tree.\n\nThe numbers in the picture refer to the point at which the fn-for-t\nfunction is CALLED with the associated tree.  NOTE THAT WE ARE TALKING\nABOUT fn-for-t, NOT fn-for-lot\n\nSo, at:\n  point 1   fn-for-t is called with R plus accumulators\n  point 2   fn-for-t is called with S plus accumulators\n  and so on\n\nAt point 1 in the picture, where the trampoline CALLS fn-for-t with R, the\nvalue of visited is empty, the value of tree-wl is empty, and the value of\npath-wl is empty.\n\nWe want you to figure out the value of visited, tree-wl, and path-wl at points\n\n   3 when fn-for-t is called with V\n   5 when fn-for-t is called with T\n   7 when fn-for-t is called with U\n\nFor the visited accumulator the values must be in order from first visited to\nlast.  Path values must be in order from top of tree to bottom. Worklist values\nmust be in the order the tree traversal would naturally put them.  In these\naccumulator values you must to use strings like \"R\" in cases where the\naccumulator value would include strings.  Use the named constants R, S, T, etc.\nin places where you need a Tree value.\n\nNOTE 1: We suggest you work out your answer on paper first, double or\ntriple check it on paper, and then tranfer it into the form we want below.\n\nNOTE 2: Below we want your answer in a very specific form.  Please take\nthe time to meet that form.\n\nNOTE 3: You must RUN THIS FILE BEFORE SUBMITTING IT.  IF THERE ARE ANY\nERRORS OR ANY TESTS IN THE FILE FAIL THEN ZERO MARKS MAY BE AWARDED.\n\nNOTE 4: The tests at the end of the file are designed to have informative\nnames.  If you run the file and one of those tests fails then take the\ntime to read the error message. It can help you fix the problem.\n\n|#\n\n(define visited-values\n  (list empty                                       ;at 1\n        (list \"R\" \"S\")                              ;at 3\n        (list \"R\" \"S\" \"V\" \"W\")                      ;at 5\n        (list \"R\" \"S\" \"V\" \"W\" \"T\" \"X\")))            ;at 7\n\n(define tree-wl-values\n  (list empty                                       ;at 1\n        (list W T U)                                ;at 3\n        (list U)                                    ;at 5\n        (list)))                                    ;at 7\n\n(define path-wl-values\n  (list empty                                       ;at 1\n        (list (list \"R\" \"S\") (list \"R\") (list \"R\")) ;at 3\n        (list (list \"R\"))                           ;at 5\n        (list)))                                    ;at 7",
    "student_answer": "Well, tree-wl and path-wl are tandem work lists, which means a couple things, mainly that they will have the same number of elements, and that they will correspond in some way. In this case, they correspond in that each element in path-wl is the path to the corresponding element in tree-wl.\nThe tree-wl is just our tail recursive list of places to visit. Our tree starts at R, and we append subs S, T, U to the wl. Then we call fn-for-t with S, and we take S off the worklist. When we call fn-for-lot inside of fn-for-t, V, W will be appended to the tree-wl, as they are the unvisited subs of S.\nAt 3, our first answer for tree-wl, we are calling fn-for-t on v, so V is off the work-list, leaving us with W, T, U,\nThe path-wl I hope you can see is simply the list of paths to W, T, and U.\nIf you have any other questions let me know!",
    "instructor_answer": "Not Found"
}