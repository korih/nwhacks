{
    "author": "Mina Chong",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 695,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/695",
    "title": "Lifting local definitions",
    "question": "Hello, I tried to check my work for mt2-p6-starter from @689 using the stepper but I was a bit confused if I was getting the renaming correct.\nSorry for the long block of code, but I'm hoping it helps to explain my thought process better (everything is commented out but the lifted definitions, as requested in the question):\n;; ORIGINAL DEFINITION:\n#;\n(define (foo n lox)\n  (cond [(or (zero? n) (empty? lox)) empty]    \n        [else\n         (local [(define (fn x)\n                   (build-list n\n                               (lambda (n)\n                                 (+ n x (first lox)))))]\n           (append (map fn (rest lox))\n                   (foo (sub1 n)\n                        (rest lox))))]))\n\n;; EVALUATE: (foo 3 (list 4 6 0 1))\n\n#; \n(cond [(or (zero? 3) (empty? (list 4 6 0 1))) empty]    \n      [else\n       (local [(define (fn x)\n                 (build-list 3\n                             (+ 3 x (first (list 4 6 0 1)))))]\n         (append (map fn (rest (list 4 6 0 1)))\n                 (foo (sub1 3)\n                      (rest (list 4 6 0 1)))))])\n\n\n;; FIRST LIFTED DEFINITION:\n(define (fn_0 x)\n  (build-list 3\n              (lambda (n)\n                (+ n x 4))))\n\n;; (map fn_0 (list 6 0 1))\n\n;; EVALUATE: (foo 2 (list 6 0 1))\n\n#;\n(cond [(or (zero? 2) (empty? (list 6 0 1))) empty]    \n      [else\n       (local [(define (fn x)\n                 (build-list n\n                             (lambda (n)\n                               (+ n x (first (list 6 0 1))))))]\n         (append (map fn (rest (list 6 0 1)))\n                 (foo (sub1 2)\n                      (rest (list 6 0 1)))))])\n\n;; SECOND LIFTED DEFINITION:\n(define (fn_1 x)\n  (build-list 2\n              (lambda (n)\n                (+ n x 6))))\n\n;;(map fn_1 (list 0 1))\n\n;; EVALUATE: (foo 1 (list 0 1))\n\n#;\n(cond [(or (zero? 1) (empty? (list 0 1))) empty]    \n      [else\n       (local [(define (fn x)\n                 (build-list 1\n                             (lambda (n)\n                               (+ n x (first (list 0 1))))))]\n         (append (map fn (rest (list 0 1)))\n                 (foo (sub1 1)\n                      (rest (list 0 1)))))])\n\n;; THIRD LIFTED DEFINITION:\n(define (fn_2 x)\n  (build-list 1\n              (lambda (n)\n                (+ n x (first (list 0 1))))))\n\n;;(map fn_2 (list 1))\n\n;; EVALUATE: (foo 0 (list 1)) -> empty\nI think part of why the stepper confuses me might be because of lambda, any place where we can get extra practice on that (other than the lecture starters)? Thanks!",
    "student_answer": "I think since lambda functions are not named, they don't get lifted as a global definition. Also, you'll notice that lambda functions can't be directly called since they aren't named, hence they are only found as an input for another function (mostly abstract functions). \nSo the only local definition that is getting lifted is fn. \nIn my opinion, the best way to practice using lambda functions is to use them whenever applicable (see @688 for more information). I've found myself using lambda functions a few times throughout the practice midterms.",
    "instructor_answer": "Not Found"
}