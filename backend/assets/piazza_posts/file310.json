{
    "author": "Franklin Ma",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 310,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/310",
    "title": "Pong Beta",
    "question": "Below is some code I wrote to emulate the 1972 Atari game Pong. You can start it by running:\n(main (make-pong CTR-X CTR-Y 10 10 (/ HEIGHT 2) (/ HEIGHT 2)))\nControls are \"W\" and \"S\" for left paddle, \"I\" and \"K\" for right paddle, and Space to reset the ball. Enjoy!\n(require 2htdp/image)\n(require 2htdp/universe)\n(require spd/tags)\n\n;; Based on the 1972 Atari Game\n\n(@htdw Pong)\n\n;; Constants\n;; --------------------\n(define WIDTH 1000)\n(define HEIGHT 400)\n\n(define CTR-X (/ WIDTH 2))\n(define CTR-Y (/ HEIGHT 2))\n\n(define BALL-RADIUS 10)\n\n(define TOP-B (+ 0 BALL-RADIUS))\n(define BOT-B (- HEIGHT BALL-RADIUS))\n(define LEFT-WALL (+ 0 BALL-RADIUS))\n(define RIGHT-WALL (- WIDTH BALL-RADIUS))\n;; fully-visible, ball-centre must be within TOP-B, BOT-B, LEFT and RIGHT WALLs\n\n(define TOP-P (+ 0 50))\n(define BOT-P (- HEIGHT 50))\n;; fully-visible paddles must be within TOP-P and BOT-P\n\n(define PADDLE-SPEED 50)\n\n(define BALL (circle BALL-RADIUS \"solid\" \"black\"))\n\n(define PADDLE-L (rectangle 20 100 \"solid\" \"black\"))\n(define PADDLE-R (rectangle 20 100 \"solid\" \"black\"))\n\n(define MTS (empty-scene WIDTH HEIGHT))\n\n;; Data Definitions\n;; --------------------\n(@htdd Pong)\n(define-struct pong (x y dx dy pl pr))\n;; Pong is Number, Number, Number, Number, Number, Number\n;; interp. x and y coordinates of the ball, and speeds in x and y directions\n;; where positive directions are right and down\n;; also y coordinates of left and right paddles\n;; Constraint; for ball fully visible, x must be within [LEFT-WALL, RIGHT-WALL]\n;;                                     y must be within [TOP-B, BOT-B]\n;; Constraint; for paddle fully visible must be in [TOP-P, BOT-P]\n\n(@dd-template-rules compound)   ;6 fields\n\n(define (fn-for-pong p)\n  (... (pong-x p)    ;Number\n       (pong-y p)    ;Number\n       (pong-dx p)   ;Number\n       (pong-dy p)   ;Number\n       (pong-pl p)   ;Number\n       (pong-pr p))) ;Number\n\n;; Functions\n;; --------------------\n\n(@htdf main)\n(@signature Pong -> Pong)\n;; Start world with:\n;;(main (make-pong CTR-X CTR-Y 10 10 (/ HEIGHT 2) (/ HEIGHT 2)))\n\n(@template htdw-main)\n\n(define (main p)\n  (big-bang p               ;Pong\n    (on-tick ping)          ;Pong -> Pong\n    (to-draw render)        ;Pong -> Image\n    (on-key controls)))     ;Pong KeyEvent -> Pong\n\n(@htdf ping)\n(@signature Pong -> Pong)\n;; ball moves, bounces, stops at left or right wall\n(@template Pong)\n(define (ping p)\n  (cond [(<= (+ (pong-y p) (pong-dy p)) TOP-B)\n         (cond [(<= (+ (pong-x p) (pong-dx p)) LEFT-WALL)\n                (make-pong LEFT-WALL TOP-B 0 0 (pong-pl p) (pong-pr p))]\n               [(>= (+ (pong-x p) (pong-dx p)) RIGHT-WALL)\n                (make-pong RIGHT-WALL TOP-B 0 0 (pong-pl p) (pong-pr p))]\n               [(and (<= (+ (pong-x p) (pong-dx p)) 50)\n                     (= (pong-pl p) TOP-P))\n                (make-pong 50 TOP-B (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [(and (>= (+ (pong-x p) (pong-dx p)) (- WIDTH 50))\n                     (= (pong-pr p) TOP-P))\n                (make-pong (- WIDTH 50) TOP-B (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [else\n                (make-pong (+ (pong-x p) (pong-dx p))\n                           TOP-B\n                           (pong-dx p)\n                           (- (pong-dy p))\n                           (pong-pl p)\n                           (pong-pr p))])]\n        [(>= (+ (pong-y p) (pong-dy p)) BOT-B)\n         (cond [(<= (+ (pong-x p) (pong-dx p)) LEFT-WALL)\n                (make-pong LEFT-WALL BOT-B 0 0 (pong-pl p) (pong-pr p))]\n               [(>= (+ (pong-x p) (pong-dx p)) RIGHT-WALL)\n                (make-pong RIGHT-WALL BOT-B 0 0 (pong-pl p) (pong-pr p))]\n               [(and (<= (+ (pong-x p) (pong-dx p)) 50)\n                     (= (pong-pl p) BOT-P))\n                (make-pong 50 BOT-B (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [(and (>= (+ (pong-x p) (pong-dx p)) (- WIDTH 50))\n                     (= (pong-pr p) BOT-P))\n                (make-pong (- WIDTH 50) TOP-B (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [else\n                (make-pong (+ (pong-x p) (pong-dx p))\n                           BOT-B\n                           (pong-dx p)\n                           (- (pong-dy p))\n                           (pong-pl p)\n                           (pong-pr p))])]\n        [else\n         (cond [(<= (+ (pong-x p) (pong-dx p)) LEFT-WALL)\n                (make-pong LEFT-WALL (+ (pong-y p) (pong-dy p)) 0 0\n                           (pong-pl p) (pong-pr p))]\n               [(>= (+ (pong-x p) (pong-dx p)) RIGHT-WALL)\n                (make-pong RIGHT-WALL (+ (pong-y p) (pong-dy p)) 0 0\n                           (pong-pl p) (pong-pr p))]\n               [(and (<= (+ (pong-x p) (pong-dx p)) 50)\n                     (>= (pong-y p) (- (pong-pl p) 50))\n                     (<= (pong-y p) (+ (pong-pl p) 50)))\n                (make-pong 50 (+ (pong-y p) (pong-dy p))\n                           (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [(and (>= (+ (pong-x p) (pong-dx p)) (- WIDTH 50))\n                     (>= (pong-y p) (- (pong-pr p) 50))\n                     (<= (pong-y p) (+ (pong-pr p) 50)))\n                (make-pong (- WIDTH 50) (+ (pong-y p) (pong-dy p))\n                           (- (pong-dx p)) (- (pong-dy p))\n                           (pong-pl p) (pong-pr p))]\n               [else\n                (make-pong (+ (pong-x p) (pong-dx p))\n                           (+ (pong-y p) (pong-dy p))\n                           (pong-dx p)\n                           (pong-dy p)\n                           (pong-pl p)\n                           (pong-pr p))])]))\n         \n\n(@htdf render)\n;(@signature Pong -> Image)\n;; Places ball, left and right paddles at their coordinates\n(@template Pong)\n\n(define (render p)\n  (place-image BALL\n               (pong-x p)\n               (pong-y p)\n               (place-image PADDLE-L\n                            50\n                            (pong-pl p)\n                            (place-image PADDLE-R\n                                         (- WIDTH 50)\n                                         (pong-pr p)\n                                         MTS))))\n  \n(@htdf controls)\n(@signature Pong KeyEvent -> Pong)\n;; \"W\" \"S\" move left paddle up and down, \"I\" \"K\" move right paddle up and down\n;; Space resets ball to start\n(@template KeyEvent\n           Pong)\n(define (controls p ke)\n  (cond [(key=? ke \" \") (make-pong CTR-X CTR-Y 10 10 (pong-pl p) (pong-pr p))]\n        [(key=? ke \"w\")\n         (if (<= (- (pong-pl p) PADDLE-SPEED) TOP-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        TOP-P (pong-pr p))\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (- (pong-pl p) PADDLE-SPEED) (pong-pr p)))]\n        [(key=? ke \"s\")\n         (if (>= (+ (pong-pl p) PADDLE-SPEED) BOT-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        BOT-P (pong-pr p))\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (+ (pong-pl p) PADDLE-SPEED) (pong-pr p)))]\n        [(key=? ke \"i\")\n         (if (<= (- (pong-pr p) PADDLE-SPEED) TOP-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (pong-pl p) TOP-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (pong-pl p) (- (pong-pr p) PADDLE-SPEED)))]\n        [(key=? ke \"k\")\n         (if (>= (+ (pong-pr p) PADDLE-SPEED) BOT-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (pong-pl p) BOT-P)\n             (make-pong (pong-x p) (pong-y p)\n                        (pong-dx p) (pong-dy p)\n                        (pong-pl p) (+ (pong-pr p) PADDLE-SPEED)))]\n        [else\n         p]))\nYes, I'm aware that there are many cut corners with regards to following the design recipe, particularly with tests. In terms of design, everything I used has been covered in class. I didn't know how to process the ball and paddles separately, so they are thrown together as one compound data. Also, the code preventing the paddles from going offscreen has been put in the keyevent since I think putting it in the on-tick function (called ping) would have made the cond much much larger. I'd appreciate any feedback for improving the design and removing redundancy. I hope to add a score counter in the future.",
    "student_answer": "Not Found",
    "instructor_answer": "Not Found"
}