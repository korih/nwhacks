{
    "author": "Anonymous Gear",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 423,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/423",
    "title": "Problem compound P2",
    "question": "Hello,\nFor the following question, I am currently working on the first check-expect for my next-box function. When I run, it says that my make-box function expects 3 arguments, but only found 2, however in the htdd section I wrote (define-struct box (make-box a s)), giving make-box only a and s as arguments. I have posted my code below, I am not sure why it is asking for 3.\n\n(require 2htdp/image)\n(require 2htdp/universe)\n(require spd/tags)\n\n(@assignment bank/compound-p2)\n(@cwl ???)\n\n(@problem 1)\n;; Design a world program as follows:\n;;\n;; The world starts off with a small square at the center of the screen. As\n;; time passes, the square stays fixed at the center, but increases in size and\n;; rotates at a constant speed. Pressing the spacebar resets the world so that\n;; the square is small and unrotated.\n;;\n;; Starting display:\n;; https://cs110.students.cs.ubc.ca/bank/spinning-start.png\n;;\n;; After a few seconds:\n;; https://cs110.students.cs.ubc.ca/bank/spinning-after.png\n;;\n;; After a few more seconds:\n;; https://cs110.students.cs.ubc.ca/bank/spinning-more.png\n;;\n;; Immediately after pressing the spacebar:\n;; https://cs110.students.cs.ubc.ca/bank/spinning-press.png\n;;\n;; NOTE 1: Remember to follow the HtDW recipe! Be sure to do a proper domain \n;; analysis before starting to work on the code file.\n;;\n;; NOTE 2: The rotate function requires an angle in degrees as its first \n;; argument. By that it means Number[0, 360). As time goes by the box may end\n;; up spinning more than once, for example, you may get to a point where it has\n;; spun 362 degrees, which rotate won't accept. One solution to that is to use\n;; the remainder function as follows:\n;;\n;; (rotate (remainder ... 360) (text \"hello\" 30 \"black\"))\n;;\n;; where ... can be an expression that produces any positive number of degrees \n;; and remainder will produce a number in [0, 360).\n;;\n;; Remember that you can lookup the documentation of rotate if you need to know \n;; more about it.\n;;\n;; NOTE 3: There is a way to do this without using compound data. But you\n;; should design the compound data based solution.\n\n;; My world program  (make this more specific)\n\n(@htdw Box) ;(give WS a better name)\n\n;; =================\n;; Constants:\n(define BOX-IMG (square 10 \"solid\" \"red\"))\n(define WIDTH 200)\n(define HEIGHT 200)\n(define CTR-X (/ WIDTH 2))\n(define CTR-Y (/ HEIGHT 2))\n(define MTS (empty-scene WIDTH HEIGHT))\n(define ROTATIONAL-SPEED 3)\n(define GROWTH-SPEED 5)\n\n\n;; =================\n;; Data definitions:\n\n(@htdd Box)\n(define-struct box (make-box a s))\n;; box is (make-box Natural Natural)\n;; interp. number as degrees to the right turned and growth speed\n\n(define (fn-for-box b)\n  (... (box-a b)\n       (box-s b)))\n\n\n\n;; =================\n;; Functions:\n\n(@htdf main)\n(@signature Box -> Box)\n;; start the world with ...\n;; \n\n(@template htdw-main)\n\n(define (main b)\n  (big-bang b                   ; WS\n            (on-tick   next-box)     ; WS -> WS\n            (to-draw   render)   ; WS -> Image\n            (on-key    ...)))    ; WS KeyEvent -> WS\n\n(@htdf next-box)\n(@signature Box -> Box)\n;; produce the next box\n(check-expect (next-box (make-box 10 13))\n              (make-box (+ 10 ROTATIONAL SPEED) (+ 13 GROWTH SPEED)))\n\n(define (next-box b) b)\n\n(@htdf render)\n(@signature WS -> Image)\n;; render ... \n;; !!!\n(define (render ws) empty-image)",
    "student_answer": "Review the compound section of Design Recipes. There is an example there that will demonstrate what the htdd is supposed to look like for compounds. Hint: double-check your define-struct line. Hope this helps :)",
    "instructor_answer": "Not Found"
}