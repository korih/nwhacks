{
    "author": "Anonymous Mouse",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 938,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/938",
    "title": "shortest-path-tr autograder",
    "question": "The autograder is giving me the following feedback:\n 1.4%  of    10%  x     Additional tests: incorrect - 6 autograder internal additional tests failed.\nI'm uncertain of where I've made a mistake, could anyone point it out?\n(define (solve m)\n  (local [(define R (sqrt (length m)))\n\n          ;; trivial:   reaches lower right, previously seen position\n          ;; reduction: move up, down, left, right if possible\n          ;; argument:  maze is finite, so moving will eventually\n          ;;            reach trivial case or run out of moves\n\n          ;; p-wl is (listof Pos)\n          ;; primary worklist of positions to be visited\n          ;;\n          ;; path-wl is (listof (listof Pos))\n          ;; tandem worklist of corresponding paths leading to each pos in p-wl\n          ;;         \n          ;; visited is (listof Pos) <= NOT USED\n          ;; positions before p on visited in tail recursion\n          ;;\n          ;; rsf is (list of Pos)\n          ;; shortest path seen so far\n          \n          (define (solve/p p p-wl path path-wl visited rsf)\n            (cond [(solved? p)\n                   (solve/lop p-wl path-wl visited\n                              (shortest (cons p path) rsf))]\n                  [(member p path)\n                   (solve/lop p-wl path-wl visited rsf)]\n                  [else\n                   (solve/lop (append (next-ps p) p-wl)\n                              (append (make-list (length (next-ps p))\n                                                 (cons p path))\n                                      path-wl)\n                              (cons p visited)\n                              rsf)]))\n\n          (define (solve/lop p-wl path-wl visited rsf)\n            (cond [(empty? p-wl)\n                   (if (empty? rsf)\n                       false\n                       rsf)]\n                  [else\n                   (solve/p (first p-wl) (rest p-wl)\n                            (first path-wl) (rest path-wl)\n                            visited\n                            rsf)]))\n\n          (define (shortest new-path rsf)\n            (cond [(empty? rsf) new-path]\n                  [else\n                   (if (< (length new-path) (length rsf))\n                       new-path\n                       rsf)]))\n          \n\n          \n          ;; Pos -> Boolean          \n          ;; produce true if pos is at the lower right\n          (define (solved? p)\n            (and (= (pos-x p) (sub1 R))\n                 (= (pos-y p) (sub1 R))))\n\n\n          ;; Pos -> (listof Pos)\n          ;; produce next possible positions based on maze geometry\n          (define (next-ps p)\n            (local [(define x (pos-x p))\n                    (define y (pos-y p))]\n              (filter (lambda (p1)\n                        (and (<= 0 (pos-x p1) (sub1 R))  ;legal x\n                             (<= 0 (pos-y p1) (sub1 R))  ;legal y\n                             (open? (maze-ref m p1))))   ;open?\n                      (list (make-pos x (sub1 y))        ;up\n                            (make-pos x (add1 y))        ;down\n                            (make-pos (sub1 x) y)        ;left\n                            (make-pos (add1 x) y)))))    ;right\n\n          ;; Maze Pos -> Boolean\n          ;; produce contents of maze at location p\n          ;; assume p is within bounds of maze\n          (define (maze-ref m p)\n            (list-ref m (+ (pos-x p) (* R (pos-y p)))))]\n    \n    (solve/p (make-pos 0 0) empty empty empty empty empty)))",
    "student_answer": "When is your rsf changing except when you get to solved?",
    "instructor_answer": "Not Found"
}