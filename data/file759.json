{
    "author": "Anonymous Atom",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 759,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/759",
    "title": "2020w1-mt2-p3",
    "question": "Basic question, but what's a good way to remember to expect true from this check-expect:\n(check-expect (descending-from-n? (list ) 0) true)\nLogically I'd 100% say this should produce false, since an empty list doesn't begin with 0 (or anything else).  But obviously that logic fails here.\nedit:  adding question context below\nedit2: I intuitively agree with the student response, but the above check-expect comes from the solution file, and it agrees with the (non-simplified) 2-one-of table in that same file.  I'll add the rest of the file.\n(@problem 3)\n\n;; This is a two one of problem involving the following two types. \n\n(@htdd Natural)\n;; Natural is one of:\n;;  - 0\n;;  - (add1 Natural)\n\n(@htdd ListOfInteger)\n;; ListOfInteger is one of:\n;;  - empty\n;;  - (cons Integer ListOfInteger)\n;; interp. a list of integers\n\n\n;; Design a function called descending-from-n? that consumes a list of integers\n;; and a natural N and produces true if the list is a descending sequence\n;; starting with N and ending with 1.\n;;\n;; For example:\n;;  (descending-from-n? (list 7 6 5 4 3 2 1) 7)  -> true\n;;  (descending-from-n? (list 7 6 4 5) 7)        -> false\n;;  (descending-from-n? (list 6 5 4 3 2 1) 8)    -> false\n;;  (descending-from-n? empty 3)                 -> false\n;;\n;; Your solution must include all appropriate tags, a 2 one of table, with\n;; numbered cells, and a clear correspondence between each cell and the\n;; matching cond case in the function.\n;;\n;; For full credit you should reduce cond cases; but a non-reduced table, with\n;; correct correspondences, and a properly working function will earn more\n;; marks than design with reductions that has incorrect correspondences or\n;; does not work correctly.\n;;\n;; As always, a file that does not run will lose a significant number of marks.\n;; Run your work often, so that you can check and fix errors as soon as they\n;; creep in.  Also be sure to run every time before you submit.\n;;\n\n(@htdf descending-from-n?)\n(@signature ListOfInteger Natural -> Boolean)\n;; produce true if lon is a descending series starting at n\n\n(check-expect (descending-from-n? (list ) 0) true)\n(check-expect (descending-from-n? (list 1) 0) false)\n(check-expect (descending-from-n? (list 7 6 5 4 3 2 1) 7) true)\n(check-expect (descending-from-n? (list 7 6 4 5) 7) false)\n(check-expect (descending-from-n? (list 6 5 4 3 2 1) 8) false)\n(check-expect (descending-from-n? empty 3) false)\n(check-expect (descending-from-n? (list 1) 1) true)\n\n(@template 2-one-of)\n\n#|\nNot simplified table\n\n            n ->               0        (add1 Natural)                     \n                                                                           \nloi                                                                        \n                                                                           \n                                                                           \n v                                                                         \n\n                                                                           \n                                                                           \nempty                      true [1]          false [2]                     \n                                                                           \n                                                                           \n\n                                                                           \n                                                                           \n(cons Natural LOI)         false [3]         (and (= (first loi) n)   [4]  \n                                                  (descending-from-n?      \n                                                   (rest loi) (sub1 n)))   \n\n|#\n\n#;\n(define (descending-from-n? loi n)\n  (cond [(and (empty? loi) (zero? n)) true]            ; [1]\n        [(empty? loi) false]                           ; [2]\n        [(zero? n) false]                              ; [3]\n        [else                                          ; [4]\n         (and (= (first loi) n)\n              (descending-from-n?\n               (rest loi) (sub1 n)))]))\n\n#|\nSimplified table\n\n            n ->               0        (add1 Natural)                     \n                                                                           \nloi                                                                        \n                                                                           \n                                                                           \n v                                                                         \n\n                                                                           \n                                                                           \nempty               (empty? loi) [1]       false [2]\n                                                                           \n                                                                           \n\n                                                                           \n                                                                           \n(cons Natural LOI)  (empty? loi) [1]       (and (= (first loi) n)   [3]      \n                                                (descending-from-n?          \n                                                 (rest loi) (sub1 n)))\n\n|#\n\n\n(define (descending-from-n? loi n)\n  (cond [(zero? n) (empty? loi)] ; [1]\n        [(empty? loi) false]     ; [2]\n        [else                    ; [3]\n         (and (= (first loi) n)\n              (descending-from-n? (rest loi)\n      (sub1 n)))]))",
    "student_answer": "Empty should be false because it can never include 1 ",
    "instructor_answer": "Consider the else case:\n (and (= (first loi) n) (descending-from-n? (rest loi) (sub1 n)))\nI assume that this, as it currently is, seems a reasonable else case to you. Now consider, if the case you asked about was false, what would happen to\n(descending-from-n? (list 1) 1)\nin the recursion. Would you get the result you expect?\n(Note: please feel free to follow up on this! This just seems a suitable place to pause and allow for follow-ups.)"
}