{
    "author": "Anonymous Gear",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 663,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/663",
    "title": "Problem 1 P9 Accounts Starter",
    "question": "(check-expect (abstract-fn\n               (local [(define n (make-node 1 \"Mr. Rogers\" 22 false false))\n                       (define (has-prefixed? n)\n                         (has-prefix? \"Prof.\" \"Mr. Rogers\"))]\n                 has-prefixed?)     \n               (make-node 1 \"Mr. Rogers\" 22 false false))\n              (make-node 1 \"Mr. Rogers\" 22 false false))\nSo I am doing the P9 abstraction problem from EdX right now and I am a bit confused about why this local expression that I made works. It's ok that my trampoline thing returns a function as it's value right? I can't remember seeing local being used to just produce a function itself with nothing being consumed by it. (in the local at least)\nWhat I did was I changed the structure of the remove-prof function so that I could better figure out the point of variation between it and remove-debtors which led me to make a local expression.\nand here is the relevant parts for the rest of the file for context:\n(@template use-abstract-fn)\n\n(define (abstract-fn fn act)\n  (cond [(false? act) false]\n        [else\n         (if (fn (node-bal act))\n             (join (abstract-fn fn (node-l act))\n                   (abstract-fn fn (node-r act)))\n             (make-node (node-id act)\n                        (node-name act)\n                        (node-bal act)\n                        (abstract-fn fn (node-l act))\n                        (abstract-fn fn (node-r act))))]))\n\n;(define (remove-profs act)\n;  (cond [(false? act) false]\n;        [else\n;         (if (local [(define (has-prefixed? n)\n;                       (has-prefix? \"Prof.\" (node-name act)))]\n;               (has-prefixed? (node-bal act)))\n;             (join (remove-profs (node-l act))\n;                   (remove-profs (node-r act)))\n;             (make-node (node-id act)\n;                        (node-name act)\n;                        (node-bal act)\n;                        (remove-profs (node-l act))\n;                        (remove-profs (node-r act))))]))\n;\n;\n;(define (remove-debtors act)\n;  (cond [(false? act) false]\n;        [else\n;         (if (negative? (node-bal act))\n;             (join (remove-debtors (node-l act))\n;                   (remove-debtors (node-r act)))\n;             (make-node (node-id act)\n;                        (node-name act)\n;                        (node-bal act)\n;                        (remove-debtors (node-l act))\n;                        (remove-debtors (node-r act))))]))\n\n(@htdf has-prefix?)\n(@signature String String -> Boolean)\n;; Determine whether pre is a prefix of str.\n(check-expect (has-prefix? \"\" \"rock\") true)\n(check-expect (has-prefix? \"rock\" \"rockabilly\") true)\n(check-expect (has-prefix? \"blues\" \"rhythm and blues\") false)\n\n(@template String)\n\n(define (has-prefix? pre str)\n  (string=? pre (substring str 0 (string-length pre))))",
    "student_answer": "Not Found",
    "instructor_answer": "We talked about this in office hours, but I'm answering here for other students who may read this question.\nWriting the following:\n(check-expect (abstract-fn\n               (local [(define n (make-node 1 \"Mr. Rogers\" 22 false false))\n                       (define (has-prefixed? n)\n                         (has-prefix? \"Prof.\" \"Mr. Rogers\"))]\n                 has-prefixed?)     \n               (make-node 1 \"Mr. Rogers\" 22 false false))\n              (make-node 1 \"Mr. Rogers\" 22 false false))\nIs ok, but note two things:\nthe (define n ...) has no effect in this program, the n is never used.\nstylistically we usually put the local farther out, rather than just having it produce the function as a value.  So we would normally write:\n(check-expect (local [(define (has-prefixed? n)\n                        (has-prefix? \"Prof.\" \"Mr. Rogers\"))]\n                (abstract-fn has-prefixed?\n                             (make-node 1 \"Mr. Rogers\" 22 false false)))\n              (make-node 1 \"Mr. Rogers\" 22 false false))\nIf you really want to write it the way you did you can use lambda:\n(check-expect (abstract-fn (lambda (n)\n                             (has-prefix? \"Prof.\" \"Mr. Rogers\"))\n                           (make-node 1 \"Mr. Rogers\" 22 false false))\n              (make-node 1 \"Mr. Rogers\" 22 false false))"
}