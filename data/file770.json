{
    "author": "Anonymous Scale",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 770,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/770",
    "title": "Mt2-p2 (accidental release) solution verification?",
    "question": "Hi! I think I solved the second problem on the released midterm draft, and I wanted to see if this is (one of) the correct answer(s)? \nThe problem asks us to:\nDesign a function that consumes an Employee and the name of a material, and produce every employee in the tree who is working on a project that requires the given material. \nMy solution is: \n(@htdf employees-requiring-material)\n(@signature Employee String -> (listof Employee))\n;; produce list of employee that is working on project with given material\n\n(check-expect (employees-requiring-material E7 \"water\") (list E5 E6 E3 E4))\n\n(@template encapsulated Employee ListOfEmployee Project ListOfProject ListOfString)\n\n(define (employees-requiring-material e s)\n  (local [(define (fn-for-employee e)\n            (if (fn-for-lop (emp-lop e))\n                (cons e \n                 (fn-for-loe (emp-subs e)))\n                 (fn-for-loe (emp-subs e))))\n\n          (define (fn-for-loe loe)\n            (cond [(empty? loe) empty]\n                  [else\n                   (append (fn-for-employee \n                                    (first loe))\n                        (fn-for-loe (rest loe)))]))\n\n          (define (fn-for-project p)\n           (fn-for-los (pro-lom p)))\n\n          (define (fn-for-lop lop)\n            (cond [(empty? lop) false]\n                  [else\n                   (local [(define try \n                  (fn-for-project (first lop)))]\n                     (if (not (false? try))\n                         try\n                        (fn-for-lop (rest lop))))]))\n\n          (define (fn-for-los los)\n            (cond [(empty? los) false]\n                  [else\n                   (local [(define try (string=? s (first los)))]\n                     (if (not (false? try))\n                         try\n                        (fn-for-los (rest los))))]))]\n\n    (fn-for-employee e)))\nGiven these Data Definitions: \n(@htdd Employee ListOfEmployee Project ListOfProject ListOfString)\n(define-struct emp (name yrs lop subs))\n;; Employee is (make-emp String Natural ListOfProject ListOfEmployee)\n;; interp.\n;;  an arbitrary-arity tree of employees an employee has a name, years of experience, \n;;  a list of projects they are working on and and a list of employees that report to them.\n\n;; ListOfEmployee is one of:\n;;  - empty\n;;  - (cons Employee ListOfEmployee)\n;; interp. a list of employees\n\n(define-struct pro (name cost lom))\n;; Project is (make-pro String Natural ListOfString)\n;; interp. a project with a name, cost in \n;; Canadian dollars, and a list of materials \n;; needed to complete the given project\n\n;; ListOfProject is one of:\n;; - empty\n;; - (cons Project ListOfProject)\n;; interp. a list of projects\n\n;; ListOfString is one of:\n;; - empty\n;; - (cons String ListOfString)\n;; interp. a list of strings\n\n(define LOSE empty)\n(define LOS1 (list \"sand\" \"water\" \"mercury\"))\n(define LOS2 (list \"cement\" \"wood\" \"plaster\"))\n(define LOS3 (list \"limestone\"))\n\n(define P1 (make-pro \"P123\" 400 LOSE))\n(define P2 (make-pro \"P311\" 100 LOS1))\n(define P3 (make-pro \"P512\" 900 LOS2))\n(define P4 (make-pro \"P451\" 300 LOS3))\n\n(define LOPE empty)\n(define LOP123 (list P1 P2 P3))\n\n(define E1 (make-emp \"Bob\" 2 (list P1) empty))\n(define E2 (make-emp \"Sam\" 3 (list P1) empty))\n(define E3 (make-emp \"Mia\" 2 (list P2) empty))\n(define E4 (make-emp \"Doh\" 4 (list P1 P2) empty))\n(define E5 (make-emp \"Jon\" 6 (list P1 P2 P3) (list E1)))\n(define E6 (make-emp \"Kim\" 9 (list P2 P3 P4) (list E2 E3 E4)))\n(define E7 (make-emp \"Ann\" 5 empty (list E5 E6)))\n\n(define LORE empty)\n(define LOR234 (list E2 E3 E4))",
    "student_answer": "Hi!  I'm not sure why you did a backtracking search for fn-for-lop -- the function that you have written always produces a Boolean, so it seems a little redundant. But otherwise, I got a pretty similar answer! ",
    "instructor_answer": "Not Found"
}