{
    "author": "Anonymous Helix",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 649,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/649",
    "title": "Having trouble with problem in Fold Functions pt.3",
    "question": "I'm working on the remaining problems that are in the starter for this video (fold functions pt. 3) on EDX, and think I'm doing something wrong here.\n; PROBLEM:\n; \n; Design an abstract fold function for Element (and (listof Element)). \n; \n\n(define-struct elt (name data subs))\n;; Element is (make-elt String Integer ListOfElement)\n;; interp. An element in the file system, with name, and EITHER data or subs.\n;;         If data is 0, then subs is considered to be list of sub elements.\n;;         If data is not 0, then subs is ignored.\n\n;; ListOfElement is one of:\n;;  - empty\n;;  - (cons Element ListOfElement)\n;; interp. A list of file system Elements\n\n; .\n\n(define F1 (make-elt \"F1\" 1 empty))\n(define F2 (make-elt \"F2\" 2 empty))\n(define F3 (make-elt \"F3\" 3 empty))\n(define D4 (make-elt \"D4\" 0 (list F1 F2)))\n(define D5 (make-elt \"D5\" 0 (list F3)))\n(define D6 (make-elt \"D6\" 0 (list D4 D5)))\n#;\n(define (fn-for-element e)\n  (local [(define (fn-for-element e)\n            (... (elt-name e)    ;String\n                 (elt-data e)    ;Integer\n                 (fn-for-loe (elt-subs e))))\n\n          (define (fn-for-loe loe)\n            (cond [(empty? loe) (...)]\n                  [else\n                   (... (fn-for-element (first loe))\n                        (fn-for-loe (rest loe)))]))]\n    (fn-for-element e)))\n\n(define (fold-element c1 c2 b e)\n    (local [(define (fn-for-element e)         ; -> X\n              (c1 (elt-name e)    ;String\n                  (elt-data e)   ;Integer\n                  (fn-for-loe (elt-subs e))))\n\n            (define (fn-for-loe loe)           ; -> Y       \n              (cond [(empty? loe) b]\n                    [else\n                     (c2 (fn-for-element (first loe))\n                         (fn-for-loe (rest loe)))]))]\n      (fn-for-element e)))\n\n; \n; PROBLEM\n; \n; Complete the design of sum-data that consumes Element and producs\n; the sum of all the data in the element and its subs\n; \n\n;; Element -> Integer\n;; produce the sum of all the data in element (and its subs)\n(check-expect (sum-data F1) 1)\n(check-expect (sum-data D5) 3)\n(check-expect (sum-data D4) (+ 1 2))\n(check-expect (sum-data D6) (+ 1 2 3))\n\n;(define (sum-data e) 0) ;stub\n\n(define (sum-data e)\n  (fold-element + + 0 e))\n\n\n(define (fold-element c1 c2 b e)\n(local [(define (fn-for-element e)        \n            (c1 (elt-data e)   \n                (fn-for-loe (elt-subs e))))\n\n        (define (fn-for-loe loe)                \n            (cond [(empty? loe) b]\n                  [else\n                   (c2 (fn-for-element (first loe))\n                       (fn-for-loe (rest loe)))]))]\n    (fn-for-element e)))\nI'm not sure how to solve the second problem without altering the fold template (given in the first problem).\n\nSo for the second problem, I had to take (elt-name e) out of the fold-element template, and I also had to comment out the original fold-element template in the first problem to get the tests pass.\nI'm pretty sure I've done something incorrect here and have gone down the wrong path. Would appreciate any help given greatly, thank you!\nEdit: Could I get some nudges on what the template for the abstract fold function for Element would\nbe? It doesn't seem to be a simple (listof X)",
    "student_answer": "Not Found",
    "instructor_answer": "The first rule of fold functions is that you can't edit them to suit the needs of one specific other function.  The fold function is the fold function.\nI suggest reviewing the lecture on fold functions which shows several examples of defining a special local function that can be passed to the fold function, ignore some arguments, and do what you want to do."
}