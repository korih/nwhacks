{
    "author": "Angad Dhillon",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 999,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/999",
    "title": "2020 W1 Final Problem 6",
    "question": "I used different accumulators (t-wl, a worklist of boards yet to visit and visited, a list of boards visited) from the solution, since the solution\u2019s second accumulator used is a natural which keeps track of number of boards visited. My solution runs and all tests pass, so would this also get 100 on actual exam, even though my accumulators are different?\n(@htdf nqueens)\n(@signature Natural -> Natural or false)\n;; produce total number of boards visited to find the solution or false  \n(check-expect (nqueens 1) 2)\n(check-expect (nqueens 2) false)\n(check-expect (nqueens 3) false)\n(check-expect (nqueens 4) 16)\n(check-expect (nqueens 5) 6)\n(check-expect (nqueens 6) 251)\n(check-expect (nqueens 7) 12)\n(check-expect (nqueens 8) 1970)   \n\n(@template encapsulated backtracking genrec arb-tree accumulators)\n\n(define (nqueens N)          \n  ;; Termination argument:\n  ;; Trivial cases:\n  ;;   bd is solved or it is impossible to add a queen and get a valid board\n  ;; \n  ;; Reduction step:\n  ;;   add a queen at every possible empty position (after last queen)\n  ;; \n  ;; Since board is finite, and each board is explored at most once, \n  ;; search will definitely terminate. (But the search space does grow\n  ;; really fast!)\n  \n  (local [;; Board -> Natural or false\n          (define (fn-for-bd bd t-wl visited)\n            (cond [(solved? bd) (length visited)] \n                  [else\n                   (fn-for-lobd (append (next-boards bd) t-wl)\n                                (cons bd visited))]))\n\n          ;; (listof Board) -> Natural or false\n          (define (fn-for-lobd t-wl visited)\n            (cond [(empty? t-wl) false]\n                  [else\n                   (fn-for-bd (first t-wl) (rest t-wl) visited)])) \n                 \n          \n          \n          ;; Board -> Boolean\n          ;; Produce true if board has N queens.\n          (define (solved? bd) (= (length bd) N))\n\n\n          ;; Board -> (listof Board)\n          ;; produce next valid boards by adding a queen at every new position \n          ;;   - that comes after all existing queen positions (not required)\n          ;;   - that does not attack any existing queens\n          ;; (@template fn-composition use-abstract-fn)\n          (define (next-boards bd)\n            (local [(define max-so-far (foldr max -1 bd))] ;highest queen pos\n              (map (lambda (p2) (cons p2 bd)) \n                   (filter (lambda (p2)\n                             (and (> p2 max-so-far)\n                                  (andmap (lambda (p1)     \n                                            (not (attack? p2 p1)))\n                                          bd)))\n                           (build-list (sqr N) identity)))))\n          \n          ;; Position Position -> Boolean\n          ;; produce true if queens at position a and b attack each other\n          (define (attack? pa pb)\n            (local [(define x1 (pos-x pa))\n                    (define y1 (pos-y pa))\n                    (define x2 (pos-x pb))\n                    (define y2 (pos-y pb))]\n              (or (= x1 x2)                           ;same row\n                  (= y1 y2)                           ;same column\n                  (= (/ (- y2 y1) (- x2 x1))  1)      ;same slope  1 diagonal\n                  (= (/ (- y2 y1) (- x2 x1)) -1))))   ;same slope -1 diagonal\n          \n          \n          ;; Pos -> Natural\n          ;; produce the row or column number in [0, N) for the given position\n          (define (pos-x p) (remainder p N))\n          (define (pos-y p) (quotient  p N))]\n    \n    (fn-for-bd empty empty (list 1))))",
    "student_answer": "Not Found",
    "instructor_answer": "I don't see accumulator types and invariants in this function design...    so I am required to say I can't understand the question. :) "
}