{
    "author": "Anonymous Atom",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 725,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/725",
    "title": "2020w1-mt2 pt.4 template tag",
    "question": "The original template tag for the (fn-for-person p) function is  \n(@template Person (listof Person) encapsulated)\nhowever for the abstract function we are told to create, the solution adds an extra template tag which is Date as shown below\n(@template Person (listof Person) Date encapsulated)\nWhy is this the case? My assumption was that the template tag for the abstract function will be the exact same as the template tag from which we derive it, in this case the same as fn-for-person\nHere is the code:\n(@htdd Date)\n;; Date is String\n;; interp. a calendar date\n\n(@htdd Person)\n(define-struct person (name bdate marriages))\n;; Person is (make-person String Date (listof Marriage))\n;; interp. A person with their first name, birthdate and all their marriages\n\n(@htdd Marriage)\n(define-struct marriage (date spouse children))\n;; Marriage is (make-marriage Date Person (listof Person))\n;; interp. A marriage record with the date, the spouse, and the children\n\n(define P0 (make-person \"Ali\" \"1 Jul 1973\" empty))\n(define P1 (make-person \"Sam\" \"11 Nov 1998\" empty))\n(define P2 (make-person \"Alex\" \"11 Oct 2003\" empty))\n\n(define P3 (make-person \"Avi\" \"1 Jan 1971\"\n                        (list (make-marriage \"3 Aug 1996\"\n                                             P0 (list P1 P2)))))\n\n(@template Person (listof Person) encapsulated)\n\n(define (fn-for-person p)\n  (local [(define (fn-for-person p)\n            (... (person-name p)\n                 (fn-for-date (person-bdate p))\n                 (fn-for-lom (person-marriages p))))\n\n          (define (fn-for-marriage m)\n            (... (fn-for-date (marriage-date m))\n                 (fn-for-person (marriage-spouse m))\n                 (fn-for-lop (marriage-children m))))\n\n          (define (fn-for-date d)\n            (... d))\n\n          (define (fn-for-lop lop)\n            (cond [(empty? lop) (...)]\n                  [else\n                   (... (fn-for-person (first lop))\n                        (fn-for-lop (rest lop)))]))\n\n          (define (fn-for-lom lom)\n            (cond [(empty? lom) (...)]\n                  [else\n                   (... (fn-for-marriage (first lom))\n                        (fn-for-lom (rest lom)))]))]\n    (fn-for-person p)))\n\n;; Complete the design of the the abstract fold function for Person. You\n;; must add the following to the start we have provided below:\n;; function fold-person, and provide:\n;;   - one check-expect - that produces a copy of the consumed Person\n;;   - a correct function definition\n;;\n;; A file that does check syntax will lose a significant number of marks.\n;; Run your work often, so that you can check and fix errors as soon as they\n;; creep in.  Also be sure to run every time before you submit.\n\n(@htdf fold-person)\n(@signature (String Z B -> X) (Z X A -> Y) (Date -> Z) \n            (X A -> A) (Y B -> B) A B Person -> X)\n;; abstract fold for person\n(check-expect (fold-person make-person make-marriage\n                           identity cons cons empty empty P3) P3)\n\n(define (fold-person fn1 fn2 fn3 fn4 fn5 b1 b2 p)\n  (local [(define (fn-for-person p)\n            (fn1 (person-name p)\n                 (fn-for-date (person-bdate p))\n                 (fn-for-lom (person-marriages p))))\n\n          (define (fn-for-marriage m)\n            (fn2 (fn-for-date (marriage-date m))\n                 (fn-for-person (marriage-spouse m))\n                 (fn-for-lop (marriage-children m))))\n\n          (define (fn-for-date d)\n            (fn3 d))\n\n          (define (fn-for-lop lop)\n            (cond [(empty? lop) b1]\n                  [else\n                   (fn4 (fn-for-person (first lop))\n                        (fn-for-lop (rest lop)))]))\n\n          (define (fn-for-lom lom)\n            (cond [(empty? lom) b2]\n                  [else\n                   (fn5 (fn-for-marriage (first lom))\n                        (fn-for-lom (rest lom)))]))]\n    (fn-for-person p)))\n\n(@template Person (listof Person) Date encapsulated)",
    "student_answer": "Not Found",
    "instructor_answer": "@6. pls include enough problem text that we can answer, or at the very least a direct link to the file."
}