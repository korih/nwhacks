{
    "author": "Mina Chong",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1033,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1033",
    "title": "lab-11 find-route (shortest and TR)",
    "question": "(@htdf find-shortest-route)\n(@signature Venue String -> (listof String) or false)\n;; produce shortest list of streetway names that can get you to the named venue, or false\n(check-expect (find-route (make-vnu \"West Coast Express\"\n                                    (list (make-sw \"Cordova Eastbound\"\n                                                   \"Shine Night Club\")))\n                          \"Candy Meister\")\n              (list\n               \"Cordova Eastbound\"\n               \"Richards Southbound\"\n               \"Richards Southbound\"\n               \"Pender Eastbound\"\n               \"Pender Eastbound\"\n               \"Hamilton Southbound\"))\n(check-expect (find-route (make-vnu \"Anti-Hero 13 Boutique\" (list))\n                          \"Candy Meister\")\n              false)\n(check-expect (find-route (make-vnu \"BC Marijuana Party\"\n                                    (list (make-sw \"Hastings Westbound\"\n                                                   \"Vancouver Film School\")\n                                          (make-sw \"Hamilton Southbound\"\n                                                   \"London School of Hairdressing and Aesthetics\")\n                                          ))\n                          \"London School of Hairdressing and Aesthetics\")\n              (list \"Hamilton Southbound\"))\n(check-expect (find-route (make-vnu \"WOW Tasty Food Delivery\"\n                                    (list (make-sw \"Hastings Westbound\"\n                                                   \"Vancouver Lookout\")\n                                          (make-sw \"Richards Southbound\"\n                                                   \"MacLeod's Books\")\n                                          (make-sw \"Hastings Eastbound\"\n                                                   \"Vancouver Film School\")))\n                          \"Vancouver Film School\")\n              (list \"Hastings Eastbound\"))\n\n(@template Venue (listof Streetway) Streetway genrec arb-tree accumulator)\n\n(define (find-shortest-route v0 s)\n  ;; v-wl is (listof String)\n  ;; primary worklist with list of streetway names to be visited\n  ;;\n  ;; vpath-wl is (listof Venue)\n  ;; tandem worklist with corresponding list of path of venues for each element in v-wl\n  ;;\n  ;; path-wl is (listof (listof String)) \n  ;; tandem worklist with corresponding list of sw for each element in v-wl\n  ;;\n  ;; best is (listof String)\n  ;; shortest path of streetways seen through data so far\n  \n  (local [(define (fn-for-venue v v-wl vpath vpath-wl path path-wl best)\n            (cond [(string=? (vnu-nm v) s)\n                   (fn-for-los v-wl vpath-wl path-wl (choose path best))]\n                  [(member? v vpath)\n                   (fn-for-los v-wl vpath-wl path-wl best)]\n                  [else\n                   (fn-for-los (append (vnu-los v) v-wl)\n                               (append (make-list (length (vnu-los v))\n                                                  (cons v vpath))\n                                       vpath-wl)\n                               (append (make-list (length (vnu-los v))\n                                                  path)\n                                       path-wl)\n                               best)]))\n\n          (define (fn-for-los v-wl vpath-wl path-wl best)\n            (cond [(empty? v-wl) (if (empty? best)\n                                     false\n                                     (reverse best))]\n                  [else\n                   (fn-for-sw (first v-wl) (rest v-wl)\n                              vpath-wl path-wl best)]))\n\n          (define (fn-for-sw sw v-wl vpath-wl path-wl best)\n            (fn-for-venue (lookup-venue (sw-dst sw)) v-wl\n                          (first vpath-wl) (rest vpath-wl)\n                          (cons (sw-nm sw) (first path-wl)) (rest path-wl)\n                          best))\n\n          (define (choose path best)\n            (cond [(empty? best) path]\n                  [else\n                   (if (< (length path) (length best))\n                       path\n                       best)]))]\n\n    (fn-for-venue v0 empty empty empty empty empty empty)))",
    "student_answer": "Thanks for sharing this, Mina!",
    "instructor_answer": "Not Found"
}