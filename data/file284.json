{
    "author": "Anonymous Scale",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 284,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/284",
    "title": "spider question",
    "question": "Why this (check-expect (render SPEED) (place-image SPIDER-IMAGE CTR-X SPEED MTS)) is not validity?\n(require 2htdp/image)\n(require 2htdp/universe)\n(require spd/tags)\n\n(@assignment lectures/m03-spider)\n\n(@cwl lukestu) ;replace ??? with your cwl\n\n\n(@problem 1)\n#|\nPROBLEM:\n\nDesign a world program in which a spider starts at the top of the screen\nand slowly drops down it. The spider should stop when it reaches the bottom\nof the screen.\n\nYou can improve your spider by re-running the HtDW recipe to add these\nfeatures. \n\n\n  - Draw a line from the top of the screen to the spider, this is the thread \n    it is hanging from. You will need to use add-line for this. Look in the\n    DrRacket help desk to see how add-line works.  [NOTE that adding this\n    functionality will cause the autograder to complain, the autograder is\n    just designed to grade the original problem.]\n    \n  - Arrange for pressing the space key to reset the spider to the top of \n    the screen.\n|#\n\n\n\n\n;; My world program  (make this more specific)\n\n(@htdw Spider)\n\n;; =================\n;; Constants:\n(define WIDTH 400)\n(define HEIGHT 600)\n\n(define CTR-X (/ WIDTH 2))\n\n(define SPIDER-RADIUS 10)\n(define SPIDER-IMAGE (circle SPIDER-RADIUS \"solid\" \"black\"))\n\n(define SPEED 2)\n\n(define MTS (empty-scene WIDTH HEIGHT))\n\n(define TOP (+ 0 SPIDER-RADIUS))\n(define BOT (- HEIGHT SPIDER-RADIUS))\n;; =================\n;; Data definitions:\n\n(@htdd Spider)\n;; Spider is number:\n;; interp. y coordinate of the spider\n;;         also means the distance of the spider from top\n;; CONSTRAINT: must be in [TOP, BOT] in order to be fully visible\n;;TOP and BOT defined above\n\n(@dd-template-rules atomic-non-distinct)\n\n(define (fn-for-spider s)\n  (... s))\n\n\n\n\n;; =================\n;; Functions:\n\n(@htdf main)\n(@signature Spider -> Spider)\n;; start the world with (main TOP)\n;;\n\n(@template htdw-main) ;template tag\n\n(define (main s)\n  (big-bang s                    ; Spider\n            (on-tick   tock)     ; Spider -> Spider\n            (to-draw   render))) ; spider -> Image\n\n\n\n\n\n(@htdf tock)\n(@signature Spider -> Spider)\n;; produce the next sipder, y increases by SPEED, not more than BOT\n(check-expect (tock TOP) (+ TOP SPEED))\n(check-expect (tock (- BOT SPEED 1)) (+ BOT -1)) ; AT BOT - SPEED - 1\n(check-expect (tock (- BOT SPEED)) BOT)          ; AT BOT - SPEED\n(check-expect (tock (- BOT SPEED -1)) BOT)       ; AT BOT - SPEED +1\n\n;(define (tock s) empty-image) ;stub\n\n(@template Spider) ;template tag\n\n(define (tock s)\n  (if(<= s (- BOT SPEED))\n     (+ s SPEED)\n     BOT))\n\n\n\n\n(@htdf render)\n(@signature Spider -> Image)\n;; place the SPIDER-IMAGE on MTS at its proper x and y  \n(check-expect (render TOP) (place-image SPIDER-IMAGE CTR-X TOP MTS))\n(check-expect (render SPEED) (place-image SPIDER-IMAGE CTR-X SPEED MTS))\n(check-expect (render (/ HEIGHT 2))\n              (place-image SPIDER-IMAGE CTR-X (/ HEIGHT 2) MTS))\n(check-expect (render BOT)\n              (place-image SPIDER-IMAGE CTR-X BOT MTS))\n\n\n;(define (render s) empty-image) ;stub\n\n(@template Spider) ;tmeplate tag\n\n(define (render s)\n  (place-image SPIDER-IMAGE CTR-X s MTS))",
    "student_answer": "Not Found",
    "instructor_answer": "What does the data definition say about valise values for Spider? Is the value of SPEED ok?"
}