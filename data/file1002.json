{
    "author": "Anonymous Beaker",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 1002,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/1002",
    "title": "problem set 10 question 5",
    "question": "i'm extremely lost on where to go from here. this is supposed to be a tandem worklist, tail-recursive function. i tried following the recorded lecture but I still don't know where to go from here so any help will be appreciated. \n(@htdd Course)\n(define-struct course (number credits dependents))\n;; Course is (make-course Natural Natural ListOfCourse)\n;; interp. a course with a course number,\n;;         the number of credits the course is worth,\n;;         a list of courses that have this course as a pre-requisite\n\n\n(@htdd ListOfCourse)\n;; ListOfCourse is one of:\n;; - empty\n;; - (cons Course ListOfCourse)\n;; interp. a list of courses\n\n(@htdf max-credit-path)\n(@signature Course -> (listof Natural))\n;; produce course numbers in path starting at c0 w/ max total credits\n(check-expect (max-credit-path C100) (list 100))\n(check-expect (max-credit-path C320) (list 320))\n(check-expect (max-credit-path C213) (list 213 313))\n(check-expect (max-credit-path C302) (list 302))\n(check-expect (max-credit-path C221) (list 221 304))\n(check-expect (max-credit-path C110) (list 110 210 310 319))\n\n(define (max-credit-path c0)\n  ;; path is (listof Course); path through tree to current c\n  ;;\n  ;; c-wl is (listof Course) ; course wl\n  ;;\n  ;; p-wl is (listof (listof Course)) ; courses on path in tree\n  ;;\n  ;; rsf  is (listof Course) ; path with the most amount of credits so far\n  (local [(define (fn-for-course c path c-wl p-wl rsf)\n            (local [(define num     (course-number c))\n                    (define credits (course-credits c))\n                    (define subs    (course-dependents c))]\n              (if (empty? subs)\n              (fn-for-loc subs ...c-wl ...path ...p-wl ...rsf)\n              (fn-for-loc subs ...c-wl ...path ...p-wl ...rsf))))\n\n          (define (fn-for-loc c-wl path p-wl rsf)\n            (cond [(empty? c-wl) (...)]\n                  [else\n                   (fn-for-course (first c-wl)\n                                  (rest c-wl)\n                                  ... c-wl\n                                  ...p-wl\n                                  ...rsf)]))]\n                  \n    (fn-for-course c0 empty empty empty empty)))",
    "student_answer": "You have tandem worklists now. In your fn-for-course you need to think about what you should do to your rsf accumulator when you reach the end of the course tree and the case when you don't.\nThen, in your fn-for-loc, you should consider what your function should do when you have no more courses to search.",
    "instructor_answer": "Not Found"
}