{
    "author": "Anonymous Poet",
    "position": "student",
    "course": "CPSC 110 2021WT2",
    "post_num": 985,
    "link": "https://piazza.com/class/ky0ewiregcz421/post/985",
    "title": "Problem Set 10 Problem 1 accumulator explanation?",
    "question": "(define (max-num-repeats los0)\n  ;; prev is String: the previous first string in list\n  ;; curr is Natural: number of times prev has been seen so far\n  ;; rsf is Natural: maximum number of times a string has been seen so far\n  (local [(define (fn-for-los los prev curr rsf)\n            (cond [(empty? los) (max curr rsf)]\n                  [else\n                   (if (string=? (first los) prev)\n                       (fn-for-los (rest los) (first los) (add1 curr) rsf)\n                       (fn-for-los (rest los) (first los) 1 (max curr rsf)))]))]\n    (if (empty? los0)\n        0\n        (fn-for-los (rest los0) (first los0) 1 0))))\nCan someone explain why we need an rsf and a curr accumulator for this problem? I wasn't able to do it without the two, but I am still confused on how I would figure this out on my own if it was on an exam. ",
    "student_answer": "since the problem is asking you to produce the maximum number of times there are consecutive words, there is a comparison going on there. the curr accumulator holds the information about the number of repeats on the current word, while rsf holds the information about the highest record in previous words.\ntake\n(list \"cat\" \"cat\" \"cat\" \"dog\" \"dog\" \"horse\" \"horse\" \"horse\" \"horse\" \"horse\")\nwhere \"cat is repeated 3 times, then \"dog\" is repeated 2 times, then \"horse\" is repeated 5 times\nthere are three things that you have to compare. 3 cats. 2 dogs. 5 horses. if you only had one accumulator, you'd only be able to hold onto one of those at a time.\nin the beginning, you are counting the \"cat\"s, rsf doesn't really exist yet because we haven't finished counting but curr will keep track of how far along the list of \"cat\"s we are on. when the list goes from \"cat\" to \"dog\", the curr count for cat becomes the rsf (3), and the curr restarts to count the \"dog\"s. now, we have stored info that there were 3 consecutive repeats of \"cat\" while being able to count the number of repeted \"dog\"s. when we finish counting the \"dog\"s, that curr number is compared to rsf, and whichever is bigger becomes the rsf. and then the curr number is reset to start counting the \"horse\"s.\nI hope that made sense but it is 2 am and I ended up typing a lot lol. hopefully the example helped, but the premise of the idea of having 2 accumulators is to be able to count the repetition of the current word without losing the information of how many times previous words were repeated.",
    "instructor_answer": "Not Found"
}